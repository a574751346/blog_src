{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CHAME","path":"CHAME","modified":1,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":0},{"_id":"source/images/pasted-0.png","path":"images/pasted-0.png","modified":1,"renderable":0},{"_id":"source/images/nlp1.png","path":"images/nlp1.png","modified":1,"renderable":0},{"_id":"source/images/nlp2.png","path":"images/nlp2.png","modified":1,"renderable":0},{"_id":"source/images/nlp3.png","path":"images/nlp3.png","modified":1,"renderable":0},{"_id":"source/images/pasted-1.png","path":"images/pasted-1.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"source/images/image.png","path":"images/image.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CHAME","hash":"275c50928a1f6588a4b170327934f9d7066d9887","modified":1573478231671},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1573478231683},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1573478231683},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1573478231683},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1573478231683},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1573478231683},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1573478231683},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1573478231683},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1573478231683},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1573478231683},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1573478231687},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1573478231687},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1573478231687},{"_id":"themes/next/_config.yml","hash":"275372b5f68eea750fec0b1229caf6929203acb9","modified":1573478231687},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1573478231683},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1573478231683},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1573478231687},{"_id":"source/404/index.md","hash":"e916ea25699a39b43c1e8b3496a4e8b4a1add80f","modified":1573478231671},{"_id":"source/_drafts/test-for-test.md","hash":"d716d4e2cad61c7454605829e5d9383636f6064a","modified":1573487029546},{"_id":"source/_drafts/test-post.md","hash":"0d2e5e34e98545e3f120d855b6d808953088b9f0","modified":1573487045123},{"_id":"source/_posts/C-Primer-start.md","hash":"b33c23966772503cd9cbf7e92f0b3c21f0671fd6","modified":1573480535832},{"_id":"source/_posts/C-Primer：chapter-2-variables-and-base-data-types.md","hash":"f52c92ee9e657d5f65cc831d9c91b8f6bfe29326","modified":1573480561248},{"_id":"source/_posts/C-判断变量数据类型.md","hash":"b0785234611e2ee0aae434140faef1dc59cb3d88","modified":1573480585940},{"_id":"source/_posts/Natural-Language-Processing.md","hash":"e87976d8443f7f2bb91bc01ccff37f3729d4cd39","modified":1573478231675},{"_id":"source/_posts/Python下的文件读写操作.md","hash":"16705a6cc6b35b80c33d81eff1136e26c9bfcbc2","modified":1573478231675},{"_id":"source/_posts/STL源码之空间配置器.md","hash":"c10ee51f7abdfc1580f08209d7b4d51b7918a00f","modified":1573480385538},{"_id":"source/_posts/TCP状态转换.md","hash":"d17135cc7d99cde59c8ebe14ed602d413a283e70","modified":1573487392966},{"_id":"source/_posts/hello-world.md","hash":"4d96d0c3e5d87867162a296f3afdae5dbee49d0c","modified":1573478231675},{"_id":"source/_posts/k-近邻算法小结笔记.md","hash":"483909e95f34575b4c3f6eb1c464e216b4d1b160","modified":1573478231675},{"_id":"source/_posts/type-traits是什么？.md","hash":"25a3ac652ef0c28f092706bb673000dad36f5b2c","modified":1573480486959},{"_id":"source/_posts/win10系统下端口占用.md","hash":"832d85a625f43525cab58da6354abc6b0e174ec2","modified":1573478231675},{"_id":"source/_posts/从零构建一个问答系统.md","hash":"6d0ff8a3ad5771750e87bee91183e08b47bd25df","modified":1573478231675},{"_id":"source/_posts/加解密算法.md","hash":"45ab15739c70ef454deb393e0bbbdd261b67c65c","modified":1573487202072},{"_id":"source/_posts/强类型、弱类型语言，静态、动态语言.md","hash":"f9143e2ecd6ba134c2f66f8cb5c91b2b8015b2e7","modified":1573480509612},{"_id":"source/_posts/泛型编程-generic-programming-与模板-template-编程.md","hash":"949631a7584419f6e379558df323aea5120d6a5a","modified":1573487148040},{"_id":"source/_posts/线程池中如何确定使用的线程数.md","hash":"4e6380779fbd06305a1e0f0d405c12f532e53a96","modified":1573487097059},{"_id":"source/about/index.md","hash":"5a18e4c2ab9f1a7a12d277bc47f35f6f46a117d4","modified":1573478231671},{"_id":"source/categories/index.md","hash":"90ac6c792eaadc36068e77907cbba567bfa7aef6","modified":1573478231671},{"_id":"source/images/avatar.jpg","hash":"faefb8e14abd3290667caac38ed9a0ae3e58687d","modified":1573478231671},{"_id":"source/images/pasted-0.png","hash":"f3a75feaa8cd8cf8cfd83f62564be2b9754cf347","modified":1573478231671},{"_id":"source/schedule/index.md","hash":"10b24fe7e948b62ba19102051a8f4191d9411294","modified":1573478231671},{"_id":"source/tags/index.md","hash":"044e692b2c61a27278e25f2c7aa1f638f566fd63","modified":1573478231675},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1573478231683},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1573478231683},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1573478231683},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1573478231683},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1573478231683},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1573478231683},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1573478231683},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1573478231683},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1573478231683},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1573478231683},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1573478231683},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1573478231683},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1573478231683},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1573478231683},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1573478231683},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1573478231683},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1573478231683},{"_id":"themes/next/languages/zh-Hans.yml","hash":"547bd0d410ffefcd7a92cabc037910a6f3348a31","modified":1573478231683},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1573478231683},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1573478231683},{"_id":"themes/next/layout/_layout.swig","hash":"4917da9073a3876a932c8f6ca49262f6476e7f0d","modified":1573478231683},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1573478231683},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1573478231683},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1573478231683},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1573478231683},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1573478231683},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1573478231683},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1573478231683},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1573478231687},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1573478231687},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1573478231699},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1573478231699},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1573478231699},{"_id":"source/images/nlp1.png","hash":"2e9c92ec6c1476aad191da7afce79c9bc0f6f8d6","modified":1573478231671},{"_id":"source/images/nlp2.png","hash":"2650338d1596df5c08c1492c896734728c205648","modified":1573478231671},{"_id":"source/images/nlp3.png","hash":"ef2b558231b2b4afe9b490d037d7193340cf03d1","modified":1573478231671},{"_id":"source/images/pasted-1.png","hash":"95a54455d3804c1b906eeec26f9db28728279ba4","modified":1573487328078},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1573478231683},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1573478231683},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1573478231683},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1573478231683},{"_id":"themes/next/layout/_macro/post.swig","hash":"5755b888f685d2ca8fcfe9974de9111ea6c14427","modified":1573478231683},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1573478231683},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1573478231683},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1573478231683},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1573478231683},{"_id":"themes/next/layout/_partials/footer.swig","hash":"b081da41776ea838306a5665af9cc7c62d225584","modified":1573478231683},{"_id":"themes/next/layout/_partials/head.swig","hash":"60202a5677e8a5e6e00d03e4631900dce7f68b01","modified":1573478231683},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1573478231683},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1573478231683},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1573478231683},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1573478231683},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1573478231683},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1573478231683},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"a372996c13c9d8a7c719c7f908a061495c0f2842","modified":1573478231683},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1573478231683},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1573478231687},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1573478231687},{"_id":"themes/next/layout/_third-party/lean-analytics.swig","hash":"f517ac649de4d64a69f01b84df1a400390fe4e3c","modified":1573478231687},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1573478231687},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1573478231687},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1573478231687},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1573478231687},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1573478231687},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1573478231687},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1573478231687},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1573478231687},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1573478231687},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1573478231687},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1573478231687},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1573478231687},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1573478231687},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1573478231687},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1573478231687},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573478231691},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573478231691},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1573478231691},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573478231691},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573478231691},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573478231691},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573478231691},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573478231691},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573478231691},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573478231691},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573478231691},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573478231691},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573478231691},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1573478231691},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573478231691},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573478231691},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573478231691},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1573478231691},{"_id":"source/images/image.png","hash":"e5f5e06476509f8e1dd148dbd13639b89aac3f83","modified":1573487318770},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231683},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231683},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573478231691},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1573478231683},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1573478231683},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1573478231683},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1573478231683},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1573478231683},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1573478231683},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1573478231683},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1573478231683},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1573478231683},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1573478231683},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1573478231683},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1573478231683},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1573478231683},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1573478231687},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1573478231687},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1573478231687},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1573478231687},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1573478231687},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1573478231687},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"d085dd9e4151037f8104a78ef000e177633952b9","modified":1573478231691},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1573478231691},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1573478231691},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1573478231691},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1573478231691},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1573478231691},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1573478231691},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1573478231691},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1573478231691},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1573478231691},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1573478231691},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1573478231691},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1573478231691},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1573478231691},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1573478231691},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1573478231691},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1573478231691},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1573478231691},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1573478231691},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1573478231691},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1573478231691},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1573478231691},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1573478231691},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1573478231695},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1573478231695},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1573478231691},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1573478231695},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1573478231695},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1573478231695},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1573478231695},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1573478231695},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1573478231695},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1573478231695},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1573478231695},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1573478231695},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1573478231695},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1573478231699},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1573478231699},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573478231699},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1573478231699},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573478231699},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1573478231683},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1573478231695},{"_id":"themes/next/layout/_scripts/_scripts/third-party/lean-analytics.swig","hash":"f517ac649de4d64a69f01b84df1a400390fe4e3c","modified":1573478231683},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1573478231687},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1573478231687},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1573478231687},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1573478231687},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1573478231691},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1573478231691},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1573478231695},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1573478231691},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1573478231691},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1573478231691},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573478231695},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1573478231699},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1573478231699},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573478231695},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1573478231699},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1573478231687},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1573478231687},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1573478231691},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1573478231691},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1573478231695},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1573478231695},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573478231691},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1573478231691},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1573478231695},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1573478231691},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1573478231695},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1573478231695},{"_id":"public/baidu_urls.txt","hash":"097f995549d1f5a9300b20e68bbd59421a5ff65f","modified":1573487408293},{"_id":"public/baidusitemap.xml","hash":"f7efeb08a4f6953083eb74b5d88d0c331561b811","modified":1573487408318},{"_id":"public/sitemap.xml","hash":"bccf88a1e55005186e27b2233c4af262f36c8696","modified":1573487408319},{"_id":"public/404/index.html","hash":"6b117e8679e25d16081d2a50b427a3eab7bca4e6","modified":1573487408334},{"_id":"public/about/index.html","hash":"77811c1f03f1eac3918671da93aae80366ddf764","modified":1573487408334},{"_id":"public/categories/index.html","hash":"d1141046c842a6a8e6aac6d8c178394014dd3fea","modified":1573487408334},{"_id":"public/schedule/index.html","hash":"3f027fdad6800eca179e7de8a727e2b179eecee0","modified":1573487408334},{"_id":"public/archives/2019/01/index.html","hash":"c6d81a70079a1a10825f2090f8ff40ffe5d6be92","modified":1573487408334},{"_id":"public/archives/2019/03/index.html","hash":"001d4a5a1114b9429c111ea0201db3487dac83ae","modified":1573487408334},{"_id":"public/categories/Python/index.html","hash":"436e85bc2685db5bebe103e5bf4b7874829e5b70","modified":1573487408334},{"_id":"public/categories/计算机网络/index.html","hash":"f94836650f52f0a2f198dd91ab88af8b9f742b5c","modified":1573487408334},{"_id":"public/categories/家书/index.html","hash":"a101ce559e096126938c5c6f4e741b2c9b763123","modified":1573487408335},{"_id":"public/categories/机器学习/index.html","hash":"4eb5df842237e1b04fbc042ff7612ae238776cd3","modified":1573487408335},{"_id":"public/categories/操作系统/index.html","hash":"72ff760f2aa07b1ebbbf878796a506d51b15eac1","modified":1573487408335},{"_id":"public/categories/爬虫/index.html","hash":"acd9ef341bbc6aff0bd1a21f09c24409b19f9023","modified":1573487408335},{"_id":"public/categories/C/index.html","hash":"f55f85149ef38cbaa6347221591bdd4b46a9bc05","modified":1573487408335},{"_id":"public/tags/python/index.html","hash":"1a093e7140fff705a05743a13b00477b39f32d40","modified":1573487408335},{"_id":"public/tags/file-operate/index.html","hash":"f5075370b11285e39ce99d6bacc0c3fad1b1ab31","modified":1573487408335},{"_id":"public/tags/TCP/index.html","hash":"eeb5c2918043b29701726f14d2f2f4370704bdfa","modified":1573487408335},{"_id":"public/tags/SOCKET/index.html","hash":"6970c525551a2eb83aa762e8cf038d2772700741","modified":1573487408335},{"_id":"public/tags/计算机网络/index.html","hash":"55bfcb3e47b0ece0c2fa1d232ed72d9ee0c7a601","modified":1573487408335},{"_id":"public/tags/TIME-WAIT/index.html","hash":"0ca5b050542a2f4000dba9680c5cf4d7041d3dd8","modified":1573487408335},{"_id":"public/tags/netstat/index.html","hash":"b048b21807452438e462494780821177fa4699c8","modified":1573487408335},{"_id":"public/tags/家书/index.html","hash":"bf821a554fcaf6a85bc1a30103a762627e5faec6","modified":1573487408335},{"_id":"public/tags/机器学习实战/index.html","hash":"c1c1ea0cdc74e1e462c7f5daca5a1c3ad88508a2","modified":1573487408336},{"_id":"public/tags/操作系统/index.html","hash":"982225f8d5284b7e01c0c93ceb5885e7ef379959","modified":1573487408336},{"_id":"public/tags/win10/index.html","hash":"92de56a3d5f579b03cba3aa341c0ddc989e417b9","modified":1573487408336},{"_id":"public/tags/端口/index.html","hash":"dd17ceab61687e81fa48c11e81aca9d96dda2407","modified":1573487408336},{"_id":"public/tags/加密/index.html","hash":"708371cb9dd5012720af03b6633a4758cc1add74","modified":1573487408336},{"_id":"public/tags/哈希/index.html","hash":"d9dda4ae50522ff2662fe5322280230b74684fb9","modified":1573487408336},{"_id":"public/tags/AES/index.html","hash":"5fde4b1d6a8cdde7460658db347583d09a2ad137","modified":1573487408336},{"_id":"public/tags/C/index.html","hash":"26b5683251f2b2e0c1f8867337524aff70407ec4","modified":1573487408336},{"_id":"public/tags/多线程/index.html","hash":"9d24e6c95499b1e3bc375d2f8803050d4ff23472","modified":1573487408336},{"_id":"public/tags/index.html","hash":"40238d175719ed0da14e228c0221482fe30a7663","modified":1573487408336},{"_id":"public/2019/11/11/TCP状态转换/index.html","hash":"613a4d8be30533d3bcdbcb5562ade1abbc2a9da2","modified":1573487408336},{"_id":"public/2019/11/11/泛型编程-generic-programming-与模板-template-编程/index.html","hash":"bd9f46746b013dc6848eddc563458102fe35bbf5","modified":1573487408336},{"_id":"public/2019/11/11/线程池中如何确定使用的线程数/index.html","hash":"067fcacee034be4451c347988d777ed313a65bd5","modified":1573487408337},{"_id":"public/2019/11/11/C-判断变量数据类型/index.html","hash":"b7882d2c8ecf733c9441123a7be22049c0237afc","modified":1573487408337},{"_id":"public/2019/11/11/C-Primer：chapter-2-variables-and-base-data-types/index.html","hash":"d8a61cb3e2da6e4e6ea284a12cea2721f7139990","modified":1573487408337},{"_id":"public/2019/11/11/加解密算法/index.html","hash":"9f4841160da71ba7649948141630fc72c625e23d","modified":1573487408337},{"_id":"public/2019/11/11/C-Primer-start/index.html","hash":"eb8b77cba1442c901704c39cb562c68f1f6e0ef2","modified":1573487408337},{"_id":"public/2019/11/11/强类型、弱类型语言，静态、动态语言/index.html","hash":"51efa18104b80da673917ae8b369a0e6fb399b92","modified":1573487408337},{"_id":"public/2019/11/11/type-traits是什么？/index.html","hash":"d889d8ee107bc32ad9099d761327fa2ae7a80a45","modified":1573487408337},{"_id":"public/2019/11/11/STL源码之空间配置器/index.html","hash":"93b3e0b12029411ba11f616659f00eff113aaee4","modified":1573487408337},{"_id":"public/2019/03/03/从零构建一个问答系统/index.html","hash":"6d5cbdd84e076ffc13bcabca0e511fa077e92f09","modified":1573487408337},{"_id":"public/2019/01/13/Natural-Language-Processing/index.html","hash":"76ea60ac1908e8a34c2b0d91fe1e4add6be7864b","modified":1573487408337},{"_id":"public/2018/07/23/k-近邻算法小结笔记/index.html","hash":"f268f4e72230687f6c61b3f23cea24daad8bb16f","modified":1573487408337},{"_id":"public/2018/07/20/win10系统下端口占用/index.html","hash":"c6934e7cc3a8945cce67211cb5520c4c570d0a67","modified":1573487408338},{"_id":"public/2018/07/20/Python下的文件读写操作/index.html","hash":"8a6cc636db002a6654fbcb6f0dfeaeae93edeb40","modified":1573487408338},{"_id":"public/2018/07/19/hello-world/index.html","hash":"274a8b3fa3917edbf1a87eb1d9cbd9b6ba50f001","modified":1573487408338},{"_id":"public/archives/index.html","hash":"d16dc13975af7d329be1ac680f5d9ef24211b699","modified":1573487408338},{"_id":"public/archives/page/2/index.html","hash":"b876779e34073de97088bf60fa9aa9298fcbe124","modified":1573487408338},{"_id":"public/archives/2018/index.html","hash":"78cc2cf5c7295984301f7def17e2a6500c353ac6","modified":1573487408338},{"_id":"public/archives/2018/07/index.html","hash":"893d12fb4863ce964ed552629c2ea6aaccff34c1","modified":1573487408338},{"_id":"public/archives/2019/index.html","hash":"520a93e0976106be52107aa12c1c1097538e0aae","modified":1573487408338},{"_id":"public/archives/2019/page/2/index.html","hash":"b4b95d4ee76421aaaa3743f44189fce20c687eaf","modified":1573487408338},{"_id":"public/archives/2019/11/index.html","hash":"53cb882fce55dbc90f6087f9c83b262ac2b30b34","modified":1573487408338},{"_id":"public/index.html","hash":"64f27a44f3848f7b9452b223aa2c530bfb22b02c","modified":1573487408338},{"_id":"public/page/2/index.html","hash":"8730074899c62ea8c1aaf57fe664f258d2493e63","modified":1573487408339},{"_id":"public/CHAME","hash":"275c50928a1f6588a4b170327934f9d7066d9887","modified":1573487408350},{"_id":"public/images/avatar.jpg","hash":"faefb8e14abd3290667caac38ed9a0ae3e58687d","modified":1573487408356},{"_id":"public/images/pasted-0.png","hash":"f3a75feaa8cd8cf8cfd83f62564be2b9754cf347","modified":1573487408360},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573487408360},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573487408360},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1573487408360},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573487408360},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573487408361},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573487408361},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573487408361},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573487408361},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573487408361},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573487408361},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573487408361},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573487408362},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573487408362},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1573487408362},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1573487408362},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573487408362},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573487408362},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1573487408362},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1573487408362},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573487408363},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1573487408363},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1573487408363},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1573487408363},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1573487408363},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1573487408363},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573487408363},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1573487408363},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1573487408364},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1573487408364},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1573487408364},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1573487408364},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1573487408364},{"_id":"public/images/nlp2.png","hash":"2650338d1596df5c08c1492c896734728c205648","modified":1573487409186},{"_id":"public/images/nlp3.png","hash":"ef2b558231b2b4afe9b490d037d7193340cf03d1","modified":1573487409187},{"_id":"public/images/pasted-1.png","hash":"95a54455d3804c1b906eeec26f9db28728279ba4","modified":1573487409199},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1573487409199},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573487409199},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573487409199},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1573487409255},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1573487409255},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1573487409256},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1573487409259},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1573487409259},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1573487409259},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1573487409259},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1573487409260},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1573487409260},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1573487409260},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1573487409261},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1573487409263},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1573487409264},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1573487409264},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1573487409264},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1573487409264},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1573487409265},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1573487409265},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1573487409265},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1573487409267},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1573487409268},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1573487409269},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1573487409270},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1573487409270},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1573487409270},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1573487409270},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1573487409270},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1573487409271},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1573487409272},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1573487409272},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1573487409273},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1573487409274},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1573487409274},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1573487409275},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1573487409276},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1573487409276},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1573487409276},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1573487409278},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573487409280},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1573487409280},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1573487409280},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1573487409280},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1573487409280},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1573487409280},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1573487409281},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1573487409283},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1573487409284},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1573487409285},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1573487409285},{"_id":"public/css/main.css","hash":"6ebb372e4421c889eac541ad00bddb8939565685","modified":1573487409285},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1573487409285},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1573487409286},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1573487409286},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1573487409288},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1573487409289},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573487409289},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1573487409290},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1573487409290},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1573487409291},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1573487409291},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1573487409291},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1573487409292},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1573487409292},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1573487409293},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573487409294},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1573487409295},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1573487409296},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1573487409296},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1573487409299},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1573487409300},{"_id":"public/images/nlp1.png","hash":"2e9c92ec6c1476aad191da7afce79c9bc0f6f8d6","modified":1573487409300},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573487409300},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1573487409301},{"_id":"public/images/image.png","hash":"e5f5e06476509f8e1dd148dbd13639b89aac3f83","modified":1573487409330},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1573487409330},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1573487409389}],"Category":[{"name":"Python","_id":"ck2ulrv4t000db9oum5pqyyvf"},{"name":"计算机网络","_id":"ck2ulrv54000ib9ouzowgglq8"},{"name":"家书","_id":"ck2ulrv57000nb9ouz2dbbfat"},{"name":"机器学习","_id":"ck2ulrv5b000ub9ouw45t493w"},{"name":"操作系统","_id":"ck2ulrv5i000zb9oubbevh2qd"},{"name":"爬虫","_id":"ck2ulrv5l0013b9oubtfmctzp"},{"name":"C++","_id":"ck2ulrv5m0016b9ouqv89w99u"}],"Data":[],"Page":[{"title":"404","date":"2018-07-20T05:34:08.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-07-20 13:34:08\n---\n","updated":"2019-11-11T13:17:11.671Z","path":"404/index.html","comments":1,"layout":"page","_id":"ck2ulrv3s0000b9ouyatelps1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"about","date":"2018-07-20T05:31:55.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-20 13:31:55\n---\n","updated":"2019-11-11T13:17:11.671Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck2ulrv3z0002b9ouw9cksdnv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-07-20T05:31:32.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-20 13:31:32\ntype: \"categories\"\n---\n","updated":"2019-11-11T13:17:11.671Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2ulrv470004b9ouag0tsuvt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-07-20T05:32:28.000Z","type":"schedule","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-07-20 13:32:28\ntype: \"schedule\"\n---\n","updated":"2019-11-11T13:17:11.671Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck2ulrv4a0006b9ouwkektll6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-20T05:31:45.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-20 13:31:45\ntype: \"tags\"\n---\n","updated":"2019-11-11T13:17:11.675Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2ulrv4d0008b9ou26gz5dv5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"test for test","author":"Meredith Ma","date":"2019-11-11T13:19:00.000Z","_content":"","source":"_drafts/test-for-test.md","raw":"title: test for test\nauthor: Meredith Ma\ntags: []\ncategories: []\ndate: 2019-11-11 21:19:00\n---\n","slug":"test-for-test","published":0,"updated":"2019-11-11T15:43:49.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv3u0001b9oukplkpdzi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"test post","author":"Meredith Ma","date":"2019-11-11T13:05:45.000Z","_content":"this is a test!","source":"_drafts/test-post.md","raw":"title: test post\nauthor: Meredith Ma\ndate: 2019-11-11 21:05:45\ntags:\n---\nthis is a test!","slug":"test-post","published":0,"updated":"2019-11-11T15:44:05.123Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv400003b9ou8qusnqbq","content":"<p>this is a test!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this is a test!</p>\n"},{"title":"C++ Primer : start","author":"Meredith Ma","date":"2019-11-11T13:55:35.000Z","_content":"<font color=red><strong>iostream</strong></font>\n\n基本输入cin\n\n基本输出cout\n\n基本错误cerr\n\nclog\n\n<font color=red><strong>endl</strong></font>\n\n结束本行输入，将于设备关联的缓冲区（buffer）刷新到设备中\n\n<font color=red><strong>编译器可以检查出的错误</strong></font>\n\n语法错误：漏掉参数列表，冒号代替分号，字符串没加引号。。。\n\n类型错误：数据类型匹配错误\n\n声明错误：标准库名字忘记使用std，标识符名字拼错","source":"_posts/C-Primer-start.md","raw":"title: 'C++ Primer : start'\nauthor: Meredith Ma\ndate: 2019-11-11 21:55:35\ntags:\n---\n<font color=red><strong>iostream</strong></font>\n\n基本输入cin\n\n基本输出cout\n\n基本错误cerr\n\nclog\n\n<font color=red><strong>endl</strong></font>\n\n结束本行输入，将于设备关联的缓冲区（buffer）刷新到设备中\n\n<font color=red><strong>编译器可以检查出的错误</strong></font>\n\n语法错误：漏掉参数列表，冒号代替分号，字符串没加引号。。。\n\n类型错误：数据类型匹配错误\n\n声明错误：标准库名字忘记使用std，标识符名字拼错","slug":"C-Primer-start","published":1,"updated":"2019-11-11T13:55:35.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv480005b9oujse8fz8a","content":"<font color=\"red\"><strong>iostream</strong></font>\n\n<p>基本输入cin</p>\n<p>基本输出cout</p>\n<p>基本错误cerr</p>\n<p>clog</p>\n<font color=\"red\"><strong>endl</strong></font>\n\n<p>结束本行输入，将于设备关联的缓冲区（buffer）刷新到设备中</p>\n<font color=\"red\"><strong>编译器可以检查出的错误</strong></font>\n\n<p>语法错误：漏掉参数列表，冒号代替分号，字符串没加引号。。。</p>\n<p>类型错误：数据类型匹配错误</p>\n<p>声明错误：标准库名字忘记使用std，标识符名字拼错</p>\n","site":{"data":{}},"excerpt":"","more":"<font color=\"red\"><strong>iostream</strong></font>\n\n<p>基本输入cin</p>\n<p>基本输出cout</p>\n<p>基本错误cerr</p>\n<p>clog</p>\n<font color=\"red\"><strong>endl</strong></font>\n\n<p>结束本行输入，将于设备关联的缓冲区（buffer）刷新到设备中</p>\n<font color=\"red\"><strong>编译器可以检查出的错误</strong></font>\n\n<p>语法错误：漏掉参数列表，冒号代替分号，字符串没加引号。。。</p>\n<p>类型错误：数据类型匹配错误</p>\n<p>声明错误：标准库名字忘记使用std，标识符名字拼错</p>\n"},{"title":"C++ Primer：chapter 2 variables and base data types","author":"Meredith Ma","date":"2019-11-11T13:56:00.000Z","_content":"列表初始化\n\n定义一个int型变量并初始化0\n\nint unit_sold = 0;\nint unit_sold = {0);\nint unit_sold(0);\nint unit_sold{0}; //列表初始化\n当列表初始化用于内置类型的变量，有一个重要特点：若初始值存在丢失信息的风险，则编译器将报错。\n\nlong double id= 3.1415926\n\nint a{id};//错误，编译器报错\n\nint a(id);//正确，丢失一定信息\n\n默认初始化\n\n内置类型：所处的定义位置决定\n\n函数体外：0\n\n函数体内：不被初始化（值未定义）（试图拷贝或访问引发错误）\n\n非内置类型：由类决定\n\n声明和定义\n\nextern int i; //声明但不定义，用extern且不初始化\n\nint i; //声明且定义\n\n变量可声明多次但只可以定义一次\n\n2.4 有毒的const\n\nconst对象一旦创建不可更改，故必须初始化\n\nconst int i = get_size() //运行时初始化\n\nconst int i = 1; //编译时初始化\n\nconst int i; //错误，未初始化\n\n默认状态下，const对象仅在文件内有效（未include情况）\n\n使用extern关键字，在一个文件里extern声明并定义变量，在其他要使用的文件extern声明一次即可使用。\n\n//file.h\n\nextern const int id = 1;\n\n//fileuse.cpp\n\nextern const int id;\n\nextern也可用于非const的情况，其他变量文件之间的共享\n\nconst的引用（剧毒！）\n\n引用一旦和一个对象绑定在一起，将一直在一起\n\n普通引用和const引用区别：\n\n普通引用的类型要和与之绑定的对象严格匹配，且引用只能绑定到对象身上，不能与某个字面值或计算式的结果绑定在一起。\n\nconst引用允许用任意表达式作为初始值，只要该表达式的结果能转换为引用类型即可。\n\n原因？若类型不相同，会产生与引用类型相同的中间变量，将引用绑定此中间变量。若为常量的引用，不可改变其值，那可以使用引用去使用此值，此时有意义。若为非常量引用，即目的使改变原来的值，由于此时绑定的是中间变量，则无法更改，即无意义。c++将其归为非法行为。\n\nconst引用可能引用一个非const的对象\n\nint i = 42; const int &ref = i; //ref绑定到i上，但不可通过ref来改变i的值\n\n顶层const和底层const\n\n顶层const是指 指针本身是常量\n\n底层const是指 所指对象是常量\n\nauto忽略顶层const，保留底层const\n\nconstexpr和常量表达式\n\n值不会改变且在编译时就能得到计算结果的表达式\n\n指针、常量和类型别名\n\n若某个别名指代的是符合类型或常量，则需要注意\n\ntypedef char* pstring;\n\nconst pstring cstr = 0; //cstr是指向char的常量指针，即顶层指针,即 char* const pstring cstr = 0;\n\ndecltype类型指示符\n\n当希望使用表达式的返回值来定义变量时，可使用\n\nauto ret = val;\n\n但当只希望使用返回值类型且不适用返回值的值时，可用decltype\n\ndecltype(val) ret = value_you_liked;  // :) and 保留顶层const以及引用\n\ndecltype((val)) ret; // ret == &val 引用必须初始化","source":"_posts/C-Primer：chapter-2-variables-and-base-data-types.md","raw":"title: C++ Primer：chapter 2 variables and base data types\nauthor: Meredith Ma\ndate: 2019-11-11 21:56:00\ntags:\n---\n列表初始化\n\n定义一个int型变量并初始化0\n\nint unit_sold = 0;\nint unit_sold = {0);\nint unit_sold(0);\nint unit_sold{0}; //列表初始化\n当列表初始化用于内置类型的变量，有一个重要特点：若初始值存在丢失信息的风险，则编译器将报错。\n\nlong double id= 3.1415926\n\nint a{id};//错误，编译器报错\n\nint a(id);//正确，丢失一定信息\n\n默认初始化\n\n内置类型：所处的定义位置决定\n\n函数体外：0\n\n函数体内：不被初始化（值未定义）（试图拷贝或访问引发错误）\n\n非内置类型：由类决定\n\n声明和定义\n\nextern int i; //声明但不定义，用extern且不初始化\n\nint i; //声明且定义\n\n变量可声明多次但只可以定义一次\n\n2.4 有毒的const\n\nconst对象一旦创建不可更改，故必须初始化\n\nconst int i = get_size() //运行时初始化\n\nconst int i = 1; //编译时初始化\n\nconst int i; //错误，未初始化\n\n默认状态下，const对象仅在文件内有效（未include情况）\n\n使用extern关键字，在一个文件里extern声明并定义变量，在其他要使用的文件extern声明一次即可使用。\n\n//file.h\n\nextern const int id = 1;\n\n//fileuse.cpp\n\nextern const int id;\n\nextern也可用于非const的情况，其他变量文件之间的共享\n\nconst的引用（剧毒！）\n\n引用一旦和一个对象绑定在一起，将一直在一起\n\n普通引用和const引用区别：\n\n普通引用的类型要和与之绑定的对象严格匹配，且引用只能绑定到对象身上，不能与某个字面值或计算式的结果绑定在一起。\n\nconst引用允许用任意表达式作为初始值，只要该表达式的结果能转换为引用类型即可。\n\n原因？若类型不相同，会产生与引用类型相同的中间变量，将引用绑定此中间变量。若为常量的引用，不可改变其值，那可以使用引用去使用此值，此时有意义。若为非常量引用，即目的使改变原来的值，由于此时绑定的是中间变量，则无法更改，即无意义。c++将其归为非法行为。\n\nconst引用可能引用一个非const的对象\n\nint i = 42; const int &ref = i; //ref绑定到i上，但不可通过ref来改变i的值\n\n顶层const和底层const\n\n顶层const是指 指针本身是常量\n\n底层const是指 所指对象是常量\n\nauto忽略顶层const，保留底层const\n\nconstexpr和常量表达式\n\n值不会改变且在编译时就能得到计算结果的表达式\n\n指针、常量和类型别名\n\n若某个别名指代的是符合类型或常量，则需要注意\n\ntypedef char* pstring;\n\nconst pstring cstr = 0; //cstr是指向char的常量指针，即顶层指针,即 char* const pstring cstr = 0;\n\ndecltype类型指示符\n\n当希望使用表达式的返回值来定义变量时，可使用\n\nauto ret = val;\n\n但当只希望使用返回值类型且不适用返回值的值时，可用decltype\n\ndecltype(val) ret = value_you_liked;  // :) and 保留顶层const以及引用\n\ndecltype((val)) ret; // ret == &val 引用必须初始化","slug":"C-Primer：chapter-2-variables-and-base-data-types","published":1,"updated":"2019-11-11T13:56:01.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4b0007b9ouvdr23nqo","content":"<p>列表初始化</p>\n<p>定义一个int型变量并初始化0</p>\n<p>int unit_sold = 0;<br>int unit_sold = {0);<br>int unit_sold(0);<br>int unit_sold{0}; //列表初始化<br>当列表初始化用于内置类型的变量，有一个重要特点：若初始值存在丢失信息的风险，则编译器将报错。</p>\n<p>long double id= 3.1415926</p>\n<p>int a{id};//错误，编译器报错</p>\n<p>int a(id);//正确，丢失一定信息</p>\n<p>默认初始化</p>\n<p>内置类型：所处的定义位置决定</p>\n<p>函数体外：0</p>\n<p>函数体内：不被初始化（值未定义）（试图拷贝或访问引发错误）</p>\n<p>非内置类型：由类决定</p>\n<p>声明和定义</p>\n<p>extern int i; //声明但不定义，用extern且不初始化</p>\n<p>int i; //声明且定义</p>\n<p>变量可声明多次但只可以定义一次</p>\n<p>2.4 有毒的const</p>\n<p>const对象一旦创建不可更改，故必须初始化</p>\n<p>const int i = get_size() //运行时初始化</p>\n<p>const int i = 1; //编译时初始化</p>\n<p>const int i; //错误，未初始化</p>\n<p>默认状态下，const对象仅在文件内有效（未include情况）</p>\n<p>使用extern关键字，在一个文件里extern声明并定义变量，在其他要使用的文件extern声明一次即可使用。</p>\n<p>//file.h</p>\n<p>extern const int id = 1;</p>\n<p>//fileuse.cpp</p>\n<p>extern const int id;</p>\n<p>extern也可用于非const的情况，其他变量文件之间的共享</p>\n<p>const的引用（剧毒！）</p>\n<p>引用一旦和一个对象绑定在一起，将一直在一起</p>\n<p>普通引用和const引用区别：</p>\n<p>普通引用的类型要和与之绑定的对象严格匹配，且引用只能绑定到对象身上，不能与某个字面值或计算式的结果绑定在一起。</p>\n<p>const引用允许用任意表达式作为初始值，只要该表达式的结果能转换为引用类型即可。</p>\n<p>原因？若类型不相同，会产生与引用类型相同的中间变量，将引用绑定此中间变量。若为常量的引用，不可改变其值，那可以使用引用去使用此值，此时有意义。若为非常量引用，即目的使改变原来的值，由于此时绑定的是中间变量，则无法更改，即无意义。c++将其归为非法行为。</p>\n<p>const引用可能引用一个非const的对象</p>\n<p>int i = 42; const int &amp;ref = i; //ref绑定到i上，但不可通过ref来改变i的值</p>\n<p>顶层const和底层const</p>\n<p>顶层const是指 指针本身是常量</p>\n<p>底层const是指 所指对象是常量</p>\n<p>auto忽略顶层const，保留底层const</p>\n<p>constexpr和常量表达式</p>\n<p>值不会改变且在编译时就能得到计算结果的表达式</p>\n<p>指针、常量和类型别名</p>\n<p>若某个别名指代的是符合类型或常量，则需要注意</p>\n<p>typedef char* pstring;</p>\n<p>const pstring cstr = 0; //cstr是指向char的常量指针，即顶层指针,即 char* const pstring cstr = 0;</p>\n<p>decltype类型指示符</p>\n<p>当希望使用表达式的返回值来定义变量时，可使用</p>\n<p>auto ret = val;</p>\n<p>但当只希望使用返回值类型且不适用返回值的值时，可用decltype</p>\n<p>decltype(val) ret = value_you_liked;  // :) and 保留顶层const以及引用</p>\n<p>decltype((val)) ret; // ret == &amp;val 引用必须初始化</p>\n","site":{"data":{}},"excerpt":"","more":"<p>列表初始化</p>\n<p>定义一个int型变量并初始化0</p>\n<p>int unit_sold = 0;<br>int unit_sold = {0);<br>int unit_sold(0);<br>int unit_sold{0}; //列表初始化<br>当列表初始化用于内置类型的变量，有一个重要特点：若初始值存在丢失信息的风险，则编译器将报错。</p>\n<p>long double id= 3.1415926</p>\n<p>int a{id};//错误，编译器报错</p>\n<p>int a(id);//正确，丢失一定信息</p>\n<p>默认初始化</p>\n<p>内置类型：所处的定义位置决定</p>\n<p>函数体外：0</p>\n<p>函数体内：不被初始化（值未定义）（试图拷贝或访问引发错误）</p>\n<p>非内置类型：由类决定</p>\n<p>声明和定义</p>\n<p>extern int i; //声明但不定义，用extern且不初始化</p>\n<p>int i; //声明且定义</p>\n<p>变量可声明多次但只可以定义一次</p>\n<p>2.4 有毒的const</p>\n<p>const对象一旦创建不可更改，故必须初始化</p>\n<p>const int i = get_size() //运行时初始化</p>\n<p>const int i = 1; //编译时初始化</p>\n<p>const int i; //错误，未初始化</p>\n<p>默认状态下，const对象仅在文件内有效（未include情况）</p>\n<p>使用extern关键字，在一个文件里extern声明并定义变量，在其他要使用的文件extern声明一次即可使用。</p>\n<p>//file.h</p>\n<p>extern const int id = 1;</p>\n<p>//fileuse.cpp</p>\n<p>extern const int id;</p>\n<p>extern也可用于非const的情况，其他变量文件之间的共享</p>\n<p>const的引用（剧毒！）</p>\n<p>引用一旦和一个对象绑定在一起，将一直在一起</p>\n<p>普通引用和const引用区别：</p>\n<p>普通引用的类型要和与之绑定的对象严格匹配，且引用只能绑定到对象身上，不能与某个字面值或计算式的结果绑定在一起。</p>\n<p>const引用允许用任意表达式作为初始值，只要该表达式的结果能转换为引用类型即可。</p>\n<p>原因？若类型不相同，会产生与引用类型相同的中间变量，将引用绑定此中间变量。若为常量的引用，不可改变其值，那可以使用引用去使用此值，此时有意义。若为非常量引用，即目的使改变原来的值，由于此时绑定的是中间变量，则无法更改，即无意义。c++将其归为非法行为。</p>\n<p>const引用可能引用一个非const的对象</p>\n<p>int i = 42; const int &amp;ref = i; //ref绑定到i上，但不可通过ref来改变i的值</p>\n<p>顶层const和底层const</p>\n<p>顶层const是指 指针本身是常量</p>\n<p>底层const是指 所指对象是常量</p>\n<p>auto忽略顶层const，保留底层const</p>\n<p>constexpr和常量表达式</p>\n<p>值不会改变且在编译时就能得到计算结果的表达式</p>\n<p>指针、常量和类型别名</p>\n<p>若某个别名指代的是符合类型或常量，则需要注意</p>\n<p>typedef char* pstring;</p>\n<p>const pstring cstr = 0; //cstr是指向char的常量指针，即顶层指针,即 char* const pstring cstr = 0;</p>\n<p>decltype类型指示符</p>\n<p>当希望使用表达式的返回值来定义变量时，可使用</p>\n<p>auto ret = val;</p>\n<p>但当只希望使用返回值类型且不适用返回值的值时，可用decltype</p>\n<p>decltype(val) ret = value_you_liked;  // :) and 保留顶层const以及引用</p>\n<p>decltype((val)) ret; // ret == &amp;val 引用必须初始化</p>\n"},{"title":"C++ 判断变量数据类型","author":"Meredith Ma","date":"2019-11-11T13:56:25.000Z","_content":"参考stackflow上一个回答，能够保存变量的constant，inference等特性\n><font size=2><https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c></font>\n\n```C++\n#include<iostream>\n#include<cctype>\n#include<typeinfo>\n#include<memory>\n#include<cstdlib>\n#ifndef _MSC_VER\n#   include <cxxabi.h>\n#endif\nusing namespace std;\n\ntemplate <class T>\nstring\ntype_name()\n{\n    typedef typename std::remove_reference<T>::type TR;\n    std::unique_ptr<char, void(*)(void*)> own\n        (\n#ifndef _MSC_VER\n            abi::__cxa_demangle(typeid(TR).name(), nullptr, nullptr, nullptr),\n#else\n            nullptr,\n#endif // _MSC_VER\n            std::free\n        );\n    string r = own!=nullptr?own.get():typeid(TR).name();\n    if(std::is_const<TR>::value)\n        r+=\" const\";\n    if(std::is_volatile<TR>::value)\n        r+=\" volatile\";\n    if(std::is_lvalue_reference<T>::value)\n        r+=\"&&\";\n    return r;\n}\nint main()\n{\n    const string str = \"abc\";\n    for(auto c: str)\n        cout<<type_name<decltype(c)>()>>endl;\n}\n```","source":"_posts/C-判断变量数据类型.md","raw":"title: C++ 判断变量数据类型\nauthor: Meredith Ma\ndate: 2019-11-11 21:56:25\ntags:\n---\n参考stackflow上一个回答，能够保存变量的constant，inference等特性\n><font size=2><https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c></font>\n\n```C++\n#include<iostream>\n#include<cctype>\n#include<typeinfo>\n#include<memory>\n#include<cstdlib>\n#ifndef _MSC_VER\n#   include <cxxabi.h>\n#endif\nusing namespace std;\n\ntemplate <class T>\nstring\ntype_name()\n{\n    typedef typename std::remove_reference<T>::type TR;\n    std::unique_ptr<char, void(*)(void*)> own\n        (\n#ifndef _MSC_VER\n            abi::__cxa_demangle(typeid(TR).name(), nullptr, nullptr, nullptr),\n#else\n            nullptr,\n#endif // _MSC_VER\n            std::free\n        );\n    string r = own!=nullptr?own.get():typeid(TR).name();\n    if(std::is_const<TR>::value)\n        r+=\" const\";\n    if(std::is_volatile<TR>::value)\n        r+=\" volatile\";\n    if(std::is_lvalue_reference<T>::value)\n        r+=\"&&\";\n    return r;\n}\nint main()\n{\n    const string str = \"abc\";\n    for(auto c: str)\n        cout<<type_name<decltype(c)>()>>endl;\n}\n```","slug":"C-判断变量数据类型","published":1,"updated":"2019-11-11T13:56:25.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4e0009b9ou6da6u1u0","content":"<p>参考stackflow上一个回答，能够保存变量的constant，inference等特性</p>\n<blockquote>\n<font size=\"2\"><a href=\"https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c</a></font>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;typeinfo&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _MSC_VER</span></span><br><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cxxabi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">type_name</span>()</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type TR;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">void</span>(*)(<span class=\"keyword\">void</span>*)&gt; own</span><br><span class=\"line\">        (</span><br><span class=\"line\">#ifndef _MSC_VER</span><br><span class=\"line\">            abi::__cxa_demangle(<span class=\"keyword\">typeid</span>(TR).name(), <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>),</span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"literal\">nullptr</span>,</span><br><span class=\"line\">#endif <span class=\"comment\">// _MSC_VER</span></span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">free</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    <span class=\"built_in\">string</span> r = own!=<span class=\"literal\">nullptr</span>?own.get():<span class=\"keyword\">typeid</span>(TR).name();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_const&lt;TR&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\" const\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_volatile&lt;TR&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\" volatile\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_lvalue_reference&lt;T&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\"&amp;&amp;\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c: str)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;type_name&lt;<span class=\"keyword\">decltype</span>(c)&gt;()&gt;&gt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>参考stackflow上一个回答，能够保存变量的constant，inference等特性</p>\n<blockquote>\n<font size=\"2\"><a href=\"https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/81870/is-it-possible-to-print-a-variables-type-in-standard-c</a></font>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cctype&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;typeinfo&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _MSC_VER</span></span><br><span class=\"line\"><span class=\"meta\">#   <span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cxxabi.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">string</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">type_name</span>()</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">typename</span> <span class=\"built_in\">std</span>::remove_reference&lt;T&gt;::type TR;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">unique_ptr</span>&lt;<span class=\"keyword\">char</span>, <span class=\"keyword\">void</span>(*)(<span class=\"keyword\">void</span>*)&gt; own</span><br><span class=\"line\">        (</span><br><span class=\"line\">#ifndef _MSC_VER</span><br><span class=\"line\">            abi::__cxa_demangle(<span class=\"keyword\">typeid</span>(TR).name(), <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>, <span class=\"literal\">nullptr</span>),</span><br><span class=\"line\">#<span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"literal\">nullptr</span>,</span><br><span class=\"line\">#endif <span class=\"comment\">// _MSC_VER</span></span><br><span class=\"line\">            <span class=\"built_in\">std</span>::<span class=\"built_in\">free</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    <span class=\"built_in\">string</span> r = own!=<span class=\"literal\">nullptr</span>?own.get():<span class=\"keyword\">typeid</span>(TR).name();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_const&lt;TR&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\" const\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_volatile&lt;TR&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\" volatile\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">std</span>::is_lvalue_reference&lt;T&gt;::value)</span><br><span class=\"line\">        r+=<span class=\"string\">\"&amp;&amp;\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> str = <span class=\"string\">\"abc\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c: str)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span>&lt;&lt;type_name&lt;<span class=\"keyword\">decltype</span>(c)&gt;()&gt;&gt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Natural Language Processing（1）","author":"Meredith Ma","date":"2019-01-13T09:32:04.000Z","_content":"# Introduction\n\n##### 1.  What is Natural Language Processing (NLP) ?\n- <font color=\"red\">Machine Translation</font>: e.g., Google Translation from Arabic\n- <font color=\"red\">Information Extraction</font>: Map a document collection to structured database\n    - Complex searches \n    - Statistical queries\n- <font color=\"red\">Text Sumarization</font>\n- <font color=\"red\">Dialogue Systems</font>\n- **Basic NLP Problems :**\n    - Tagging : Strings to Tagged Sequences\n    - Parsing : Input to parse tree\n    \n##### 2.  Why NLP is hard ?\n\t** Ambiguity at Many Levels **\n    - at the acoustic level (speech recongnition)\n    - at the syntactic level\n    - at the semantic (meaning) level\n    - at the discourse (multi-clause) level:\n        - Alice says they've built a  computer that understands you like your mother. But she...<br>the \"she\" is obvious with Alice or mom.\n        \n##### 3.  What will this course be about ?\n- Language modeling, smoothed estimation\n- Tagging, hidden Markov models\n- Statistical parsing\n- Machine translation\n- Log-linear models, discriminative methods\n- Semi-supervised and unsupervised learning for NLP\n\n# The Language Modeling Problems\n- We have a training sample for example sentences in English\n- We need to \"learn\" a probability distribution p i.e., p is a function that satisfies\n$$\\sum_{x\\epsilon \\nu^{\\dotplus }}p(x) = 1, p(x) \\geq 0 for all x \\epsilon \\nu^{\\dotplus }$$\n\n\t\tp(the STOP) = 10e-12\n\t\tp(the fan STOP) = 10e-8\n\t\tp(the fan saw Beckham STOP) = 2 * 10e-8\n\t\tp(the fan saw saw STOP) = 10e-15\n\t\t...\n\t\tp(the fan saw Beckham play for Real Madrid STOP) = 2*10e-9\n\t\t...\n   \n# Trigram Language Model\n##### 1.  Markov Processes\n- Consider a sequence of random variables X1,X2,...,Xn.\n\tEach random variable can take any value in finite set V.\n   For now we assume the length n is fixed(e.g.,n=100).\n- Our gaol:model\n<center>**P(X1=x1, X2=x2,..., Xn=xn)**</center>\n\n##### 2. First-Order Markov Processes\n\tfirst of all, we have:\n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,...,Xi-1=xi-1)**</center>\n\n\tnow the first-order Markov assumption:\n    for any i $\\epsilon$ {2...n},for any x1,...,xi\n<center>**P(Xi=xi|X1=x1,...,Xi-1=xi-1) = P(Xi=xi|Xi-1=xi-1)**</center>\n\n\tthen we have:    \n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1)*P(X2=x2|X1=x1)*PIE P(Xi=xi|Xi-1=xi-1)**</center>\n\n##### 3. Second-Order Markov Processes\n\tfirst of all, we have:\n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,...,Xi-1=xi-1)**</center>\n\n\tnow the second-order Markov assumption:\n    for any i $\\epsilon$ {2...n},for any x1,...,xi\n<center>**P(Xi=xi|X1=x1,...,Xi-1=xi-1) = P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)**</center>\n\n\tthen we have:    \n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1)*P(X2=x2|X1=x1)*PIE P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)**</center>\n\n##### 4. Trigram Language Models\n- A trigram language model consist of:\n\t1. A finite set V\n    2. A parameter q(w|u,v) for each trigram u,v,w such that w epsilon V|{\\*}.\n- For any sentence x1,...,xn where xi epsilon V for i=1...(n-1), and xn=STOP, the probability of the sentence under the trigram language model is \n<center>**P(x1,x2,...,xn)=PIE q(xi|xi-2,xi-1)<br>where we define x0=x-1=\\* **</center>\n\n# Proplexity\n![avatar](/images/nlp1.png)\n![avatar](/images/nlp2.png)\n![avatar](/images/nlp3.png)","source":"_posts/Natural-Language-Processing.md","raw":"title: Natural Language Processing（1）\nauthor: Meredith Ma\ndate: 2019-01-13 17:32:04\ntags:\n---\n# Introduction\n\n##### 1.  What is Natural Language Processing (NLP) ?\n- <font color=\"red\">Machine Translation</font>: e.g., Google Translation from Arabic\n- <font color=\"red\">Information Extraction</font>: Map a document collection to structured database\n    - Complex searches \n    - Statistical queries\n- <font color=\"red\">Text Sumarization</font>\n- <font color=\"red\">Dialogue Systems</font>\n- **Basic NLP Problems :**\n    - Tagging : Strings to Tagged Sequences\n    - Parsing : Input to parse tree\n    \n##### 2.  Why NLP is hard ?\n\t** Ambiguity at Many Levels **\n    - at the acoustic level (speech recongnition)\n    - at the syntactic level\n    - at the semantic (meaning) level\n    - at the discourse (multi-clause) level:\n        - Alice says they've built a  computer that understands you like your mother. But she...<br>the \"she\" is obvious with Alice or mom.\n        \n##### 3.  What will this course be about ?\n- Language modeling, smoothed estimation\n- Tagging, hidden Markov models\n- Statistical parsing\n- Machine translation\n- Log-linear models, discriminative methods\n- Semi-supervised and unsupervised learning for NLP\n\n# The Language Modeling Problems\n- We have a training sample for example sentences in English\n- We need to \"learn\" a probability distribution p i.e., p is a function that satisfies\n$$\\sum_{x\\epsilon \\nu^{\\dotplus }}p(x) = 1, p(x) \\geq 0 for all x \\epsilon \\nu^{\\dotplus }$$\n\n\t\tp(the STOP) = 10e-12\n\t\tp(the fan STOP) = 10e-8\n\t\tp(the fan saw Beckham STOP) = 2 * 10e-8\n\t\tp(the fan saw saw STOP) = 10e-15\n\t\t...\n\t\tp(the fan saw Beckham play for Real Madrid STOP) = 2*10e-9\n\t\t...\n   \n# Trigram Language Model\n##### 1.  Markov Processes\n- Consider a sequence of random variables X1,X2,...,Xn.\n\tEach random variable can take any value in finite set V.\n   For now we assume the length n is fixed(e.g.,n=100).\n- Our gaol:model\n<center>**P(X1=x1, X2=x2,..., Xn=xn)**</center>\n\n##### 2. First-Order Markov Processes\n\tfirst of all, we have:\n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,...,Xi-1=xi-1)**</center>\n\n\tnow the first-order Markov assumption:\n    for any i $\\epsilon$ {2...n},for any x1,...,xi\n<center>**P(Xi=xi|X1=x1,...,Xi-1=xi-1) = P(Xi=xi|Xi-1=xi-1)**</center>\n\n\tthen we have:    \n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1)*P(X2=x2|X1=x1)*PIE P(Xi=xi|Xi-1=xi-1)**</center>\n\n##### 3. Second-Order Markov Processes\n\tfirst of all, we have:\n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,...,Xi-1=xi-1)**</center>\n\n\tnow the second-order Markov assumption:\n    for any i $\\epsilon$ {2...n},for any x1,...,xi\n<center>**P(Xi=xi|X1=x1,...,Xi-1=xi-1) = P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)**</center>\n\n\tthen we have:    \n<center>**P(X1=x1, X2=x2,..., Xn=xn):<br>=P(X1=x1)*P(X2=x2|X1=x1)*PIE P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)**</center>\n\n##### 4. Trigram Language Models\n- A trigram language model consist of:\n\t1. A finite set V\n    2. A parameter q(w|u,v) for each trigram u,v,w such that w epsilon V|{\\*}.\n- For any sentence x1,...,xn where xi epsilon V for i=1...(n-1), and xn=STOP, the probability of the sentence under the trigram language model is \n<center>**P(x1,x2,...,xn)=PIE q(xi|xi-2,xi-1)<br>where we define x0=x-1=\\* **</center>\n\n# Proplexity\n![avatar](/images/nlp1.png)\n![avatar](/images/nlp2.png)\n![avatar](/images/nlp3.png)","slug":"Natural-Language-Processing","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4m000ab9ou3dm7cka0","content":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><h5 id=\"1-What-is-Natural-Language-Processing-NLP\"><a href=\"#1-What-is-Natural-Language-Processing-NLP\" class=\"headerlink\" title=\"1.  What is Natural Language Processing (NLP) ?\"></a>1.  What is Natural Language Processing (NLP) ?</h5><ul>\n<li><font color=\"red\">Machine Translation</font>: e.g., Google Translation from Arabic</li>\n<li><font color=\"red\">Information Extraction</font>: Map a document collection to structured database<ul>\n<li>Complex searches </li>\n<li>Statistical queries</li>\n</ul>\n</li>\n<li><font color=\"red\">Text Sumarization</font></li>\n<li><font color=\"red\">Dialogue Systems</font></li>\n<li><strong>Basic NLP Problems :</strong><ul>\n<li>Tagging : Strings to Tagged Sequences</li>\n<li>Parsing : Input to parse tree</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-Why-NLP-is-hard\"><a href=\"#2-Why-NLP-is-hard\" class=\"headerlink\" title=\"2.  Why NLP is hard ?\"></a>2.  Why NLP is hard ?</h5><pre><code>** Ambiguity at Many Levels **\n- at the acoustic level (speech recongnition)\n- at the syntactic level\n- at the semantic (meaning) level\n- at the discourse (multi-clause) level:\n    - Alice says they&apos;ve built a  computer that understands you like your mother. But she...&lt;br&gt;the &quot;she&quot; is obvious with Alice or mom.\n</code></pre><h5 id=\"3-What-will-this-course-be-about\"><a href=\"#3-What-will-this-course-be-about\" class=\"headerlink\" title=\"3.  What will this course be about ?\"></a>3.  What will this course be about ?</h5><ul>\n<li>Language modeling, smoothed estimation</li>\n<li>Tagging, hidden Markov models</li>\n<li>Statistical parsing</li>\n<li>Machine translation</li>\n<li>Log-linear models, discriminative methods</li>\n<li>Semi-supervised and unsupervised learning for NLP</li>\n</ul>\n<h1 id=\"The-Language-Modeling-Problems\"><a href=\"#The-Language-Modeling-Problems\" class=\"headerlink\" title=\"The Language Modeling Problems\"></a>The Language Modeling Problems</h1><ul>\n<li>We have a training sample for example sentences in English</li>\n<li><p>We need to “learn” a probability distribution p i.e., p is a function that satisfies<br>$$\\sum_{x\\epsilon \\nu^{\\dotplus }}p(x) = 1, p(x) \\geq 0 for all x \\epsilon \\nu^{\\dotplus }$$</p>\n<pre><code>p(the STOP) = 10e-12\np(the fan STOP) = 10e-8\np(the fan saw Beckham STOP) = 2 * 10e-8\np(the fan saw saw STOP) = 10e-15\n...\np(the fan saw Beckham play for Real Madrid STOP) = 2*10e-9\n...\n</code></pre></li>\n</ul>\n<h1 id=\"Trigram-Language-Model\"><a href=\"#Trigram-Language-Model\" class=\"headerlink\" title=\"Trigram Language Model\"></a>Trigram Language Model</h1><h5 id=\"1-Markov-Processes\"><a href=\"#1-Markov-Processes\" class=\"headerlink\" title=\"1.  Markov Processes\"></a>1.  Markov Processes</h5><ul>\n<li>Consider a sequence of random variables X1,X2,…,Xn.<br>  Each random variable can take any value in finite set V.<br> For now we assume the length n is fixed(e.g.,n=100).</li>\n<li>Our gaol:model<center><strong>P(X1=x1, X2=x2,…, Xn=xn)</strong></center>\n\n</li>\n</ul>\n<h5 id=\"2-First-Order-Markov-Processes\"><a href=\"#2-First-Order-Markov-Processes\" class=\"headerlink\" title=\"2. First-Order Markov Processes\"></a>2. First-Order Markov Processes</h5><pre><code>first of all, we have:\n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,…,Xi-1=xi-1)</strong></center>\n\n<pre><code>now the first-order Markov assumption:\nfor any i $\\epsilon$ {2...n},for any x1,...,xi\n</code></pre><center><strong>P(Xi=xi|X1=x1,…,Xi-1=xi-1) = P(Xi=xi|Xi-1=xi-1)</strong></center>\n\n<pre><code>then we have:    \n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1)<em>P(X2=x2|X1=x1)</em>PIE P(Xi=xi|Xi-1=xi-1)</strong></center>\n\n<h5 id=\"3-Second-Order-Markov-Processes\"><a href=\"#3-Second-Order-Markov-Processes\" class=\"headerlink\" title=\"3. Second-Order Markov Processes\"></a>3. Second-Order Markov Processes</h5><pre><code>first of all, we have:\n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,…,Xi-1=xi-1)</strong></center>\n\n<pre><code>now the second-order Markov assumption:\nfor any i $\\epsilon$ {2...n},for any x1,...,xi\n</code></pre><center><strong>P(Xi=xi|X1=x1,…,Xi-1=xi-1) = P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)</strong></center>\n\n<pre><code>then we have:    \n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1)<em>P(X2=x2|X1=x1)</em>PIE P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)</strong></center>\n\n<h5 id=\"4-Trigram-Language-Models\"><a href=\"#4-Trigram-Language-Models\" class=\"headerlink\" title=\"4. Trigram Language Models\"></a>4. Trigram Language Models</h5><ul>\n<li>A trigram language model consist of:<ol>\n<li>A finite set V</li>\n<li>A parameter q(w|u,v) for each trigram u,v,w such that w epsilon V|{*}.</li>\n</ol>\n</li>\n<li>For any sentence x1,…,xn where xi epsilon V for i=1…(n-1), and xn=STOP, the probability of the sentence under the trigram language model is <center><strong>P(x1,x2,…,xn)=PIE q(xi|xi-2,xi-1)<br>where we define x0=x-1=* </strong></center>\n\n</li>\n</ul>\n<h1 id=\"Proplexity\"><a href=\"#Proplexity\" class=\"headerlink\" title=\"Proplexity\"></a>Proplexity</h1><p><img src=\"/images/nlp1.png\" alt=\"avatar\"><br><img src=\"/images/nlp2.png\" alt=\"avatar\"><br><img src=\"/images/nlp3.png\" alt=\"avatar\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><h5 id=\"1-What-is-Natural-Language-Processing-NLP\"><a href=\"#1-What-is-Natural-Language-Processing-NLP\" class=\"headerlink\" title=\"1.  What is Natural Language Processing (NLP) ?\"></a>1.  What is Natural Language Processing (NLP) ?</h5><ul>\n<li><font color=\"red\">Machine Translation</font>: e.g., Google Translation from Arabic</li>\n<li><font color=\"red\">Information Extraction</font>: Map a document collection to structured database<ul>\n<li>Complex searches </li>\n<li>Statistical queries</li>\n</ul>\n</li>\n<li><font color=\"red\">Text Sumarization</font></li>\n<li><font color=\"red\">Dialogue Systems</font></li>\n<li><strong>Basic NLP Problems :</strong><ul>\n<li>Tagging : Strings to Tagged Sequences</li>\n<li>Parsing : Input to parse tree</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-Why-NLP-is-hard\"><a href=\"#2-Why-NLP-is-hard\" class=\"headerlink\" title=\"2.  Why NLP is hard ?\"></a>2.  Why NLP is hard ?</h5><pre><code>** Ambiguity at Many Levels **\n- at the acoustic level (speech recongnition)\n- at the syntactic level\n- at the semantic (meaning) level\n- at the discourse (multi-clause) level:\n    - Alice says they&apos;ve built a  computer that understands you like your mother. But she...&lt;br&gt;the &quot;she&quot; is obvious with Alice or mom.\n</code></pre><h5 id=\"3-What-will-this-course-be-about\"><a href=\"#3-What-will-this-course-be-about\" class=\"headerlink\" title=\"3.  What will this course be about ?\"></a>3.  What will this course be about ?</h5><ul>\n<li>Language modeling, smoothed estimation</li>\n<li>Tagging, hidden Markov models</li>\n<li>Statistical parsing</li>\n<li>Machine translation</li>\n<li>Log-linear models, discriminative methods</li>\n<li>Semi-supervised and unsupervised learning for NLP</li>\n</ul>\n<h1 id=\"The-Language-Modeling-Problems\"><a href=\"#The-Language-Modeling-Problems\" class=\"headerlink\" title=\"The Language Modeling Problems\"></a>The Language Modeling Problems</h1><ul>\n<li>We have a training sample for example sentences in English</li>\n<li><p>We need to “learn” a probability distribution p i.e., p is a function that satisfies<br>$$\\sum_{x\\epsilon \\nu^{\\dotplus }}p(x) = 1, p(x) \\geq 0 for all x \\epsilon \\nu^{\\dotplus }$$</p>\n<pre><code>p(the STOP) = 10e-12\np(the fan STOP) = 10e-8\np(the fan saw Beckham STOP) = 2 * 10e-8\np(the fan saw saw STOP) = 10e-15\n...\np(the fan saw Beckham play for Real Madrid STOP) = 2*10e-9\n...\n</code></pre></li>\n</ul>\n<h1 id=\"Trigram-Language-Model\"><a href=\"#Trigram-Language-Model\" class=\"headerlink\" title=\"Trigram Language Model\"></a>Trigram Language Model</h1><h5 id=\"1-Markov-Processes\"><a href=\"#1-Markov-Processes\" class=\"headerlink\" title=\"1.  Markov Processes\"></a>1.  Markov Processes</h5><ul>\n<li>Consider a sequence of random variables X1,X2,…,Xn.<br>  Each random variable can take any value in finite set V.<br> For now we assume the length n is fixed(e.g.,n=100).</li>\n<li>Our gaol:model<center><strong>P(X1=x1, X2=x2,…, Xn=xn)</strong></center>\n\n</li>\n</ul>\n<h5 id=\"2-First-Order-Markov-Processes\"><a href=\"#2-First-Order-Markov-Processes\" class=\"headerlink\" title=\"2. First-Order Markov Processes\"></a>2. First-Order Markov Processes</h5><pre><code>first of all, we have:\n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,…,Xi-1=xi-1)</strong></center>\n\n<pre><code>now the first-order Markov assumption:\nfor any i $\\epsilon$ {2...n},for any x1,...,xi\n</code></pre><center><strong>P(Xi=xi|X1=x1,…,Xi-1=xi-1) = P(Xi=xi|Xi-1=xi-1)</strong></center>\n\n<pre><code>then we have:    \n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1)<em>P(X2=x2|X1=x1)</em>PIE P(Xi=xi|Xi-1=xi-1)</strong></center>\n\n<h5 id=\"3-Second-Order-Markov-Processes\"><a href=\"#3-Second-Order-Markov-Processes\" class=\"headerlink\" title=\"3. Second-Order Markov Processes\"></a>3. Second-Order Markov Processes</h5><pre><code>first of all, we have:\n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1) PIE P(Xi=xi|X1=x1,…,Xi-1=xi-1)</strong></center>\n\n<pre><code>now the second-order Markov assumption:\nfor any i $\\epsilon$ {2...n},for any x1,...,xi\n</code></pre><center><strong>P(Xi=xi|X1=x1,…,Xi-1=xi-1) = P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)</strong></center>\n\n<pre><code>then we have:    \n</code></pre><center><strong>P(X1=x1, X2=x2,…, Xn=xn):<br>=P(X1=x1)<em>P(X2=x2|X1=x1)</em>PIE P(Xi=xi|Xi-2=xi-2, Xi-1=xi-1)</strong></center>\n\n<h5 id=\"4-Trigram-Language-Models\"><a href=\"#4-Trigram-Language-Models\" class=\"headerlink\" title=\"4. Trigram Language Models\"></a>4. Trigram Language Models</h5><ul>\n<li>A trigram language model consist of:<ol>\n<li>A finite set V</li>\n<li>A parameter q(w|u,v) for each trigram u,v,w such that w epsilon V|{*}.</li>\n</ol>\n</li>\n<li>For any sentence x1,…,xn where xi epsilon V for i=1…(n-1), and xn=STOP, the probability of the sentence under the trigram language model is <center><strong>P(x1,x2,…,xn)=PIE q(xi|xi-2,xi-1)<br>where we define x0=x-1=* </strong></center>\n\n</li>\n</ul>\n<h1 id=\"Proplexity\"><a href=\"#Proplexity\" class=\"headerlink\" title=\"Proplexity\"></a>Proplexity</h1><p><img src=\"/images/nlp1.png\" alt=\"avatar\"><br><img src=\"/images/nlp2.png\" alt=\"avatar\"><br><img src=\"/images/nlp3.png\" alt=\"avatar\"></p>\n"},{"title":"Python下的文件读写操作","author":"Meredith Ma","date":"2018-07-20T08:04:00.000Z","_content":"读取一个文件分为三步\n---\n1.open一个文件返回一个fileobject文件对象\t\n\n2.调用fileObject对象的read(),readline(),readlines()方法读取文件内容\t\n\n3.调用fileObject的close()方法关闭打开的文件\t\n\n通常的方式是\n>with open(filename, md) as f:\n>>f.readlines()\n\n文件打开方式的区别\t\n---\nr，rb：【默认】只读，文件指针放在开头\t\nw，wb：只写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件\t\nr+，rb+：读写，指针开头\t\nw+，wb+：读写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件\t\na，ab，a+，ab+：追加，若以存在从末尾开始写，若不存在则创建新文件\t\n读取内容的方法\n---\n1.read():一次读取整个文件，不适用于大文件\t\n\n2.readline():一次读取一行，占内存小，速度慢效率低\t\n\n3.readlines():一次性读取，将内容分析成一个行的列表，可以由for...in...处理\n","source":"_posts/Python下的文件读写操作.md","raw":"title: Python下的文件读写操作\nauthor: Meredith Ma\ntags:\n  - python\n  - file operate\ncategories:\n  - Python\ndate: 2018-07-20 16:04:00\n---\n读取一个文件分为三步\n---\n1.open一个文件返回一个fileobject文件对象\t\n\n2.调用fileObject对象的read(),readline(),readlines()方法读取文件内容\t\n\n3.调用fileObject的close()方法关闭打开的文件\t\n\n通常的方式是\n>with open(filename, md) as f:\n>>f.readlines()\n\n文件打开方式的区别\t\n---\nr，rb：【默认】只读，文件指针放在开头\t\nw，wb：只写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件\t\nr+，rb+：读写，指针开头\t\nw+，wb+：读写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件\t\na，ab，a+，ab+：追加，若以存在从末尾开始写，若不存在则创建新文件\t\n读取内容的方法\n---\n1.read():一次读取整个文件，不适用于大文件\t\n\n2.readline():一次读取一行，占内存小，速度慢效率低\t\n\n3.readlines():一次性读取，将内容分析成一个行的列表，可以由for...in...处理\n","slug":"Python下的文件读写操作","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4q000bb9oudelwp5yr","content":"<h2 id=\"读取一个文件分为三步\"><a href=\"#读取一个文件分为三步\" class=\"headerlink\" title=\"读取一个文件分为三步\"></a>读取一个文件分为三步</h2><p>1.open一个文件返回一个fileobject文件对象    </p>\n<p>2.调用fileObject对象的read(),readline(),readlines()方法读取文件内容    </p>\n<p>3.调用fileObject的close()方法关闭打开的文件    </p>\n<p>通常的方式是</p>\n<blockquote>\n<p>with open(filename, md) as f:</p>\n<blockquote>\n<p>f.readlines()</p>\n</blockquote>\n</blockquote>\n<h2 id=\"文件打开方式的区别\"><a href=\"#文件打开方式的区别\" class=\"headerlink\" title=\"文件打开方式的区别    \"></a>文件打开方式的区别    </h2><p>r，rb：【默认】只读，文件指针放在开头<br>w，wb：只写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件<br>r+，rb+：读写，指针开头<br>w+，wb+：读写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件<br>a，ab，a+，ab+：追加，若以存在从末尾开始写，若不存在则创建新文件    </p>\n<h2 id=\"读取内容的方法\"><a href=\"#读取内容的方法\" class=\"headerlink\" title=\"读取内容的方法\"></a>读取内容的方法</h2><p>1.read():一次读取整个文件，不适用于大文件    </p>\n<p>2.readline():一次读取一行，占内存小，速度慢效率低    </p>\n<p>3.readlines():一次性读取，将内容分析成一个行的列表，可以由for…in…处理</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"读取一个文件分为三步\"><a href=\"#读取一个文件分为三步\" class=\"headerlink\" title=\"读取一个文件分为三步\"></a>读取一个文件分为三步</h2><p>1.open一个文件返回一个fileobject文件对象    </p>\n<p>2.调用fileObject对象的read(),readline(),readlines()方法读取文件内容    </p>\n<p>3.调用fileObject的close()方法关闭打开的文件    </p>\n<p>通常的方式是</p>\n<blockquote>\n<p>with open(filename, md) as f:</p>\n<blockquote>\n<p>f.readlines()</p>\n</blockquote>\n</blockquote>\n<h2 id=\"文件打开方式的区别\"><a href=\"#文件打开方式的区别\" class=\"headerlink\" title=\"文件打开方式的区别    \"></a>文件打开方式的区别    </h2><p>r，rb：【默认】只读，文件指针放在开头<br>w，wb：只写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件<br>r+，rb+：读写，指针开头<br>w+，wb+：读写，指针放在开头，若文件已存在则从开头覆盖；若不存在则创建新文件<br>a，ab，a+，ab+：追加，若以存在从末尾开始写，若不存在则创建新文件    </p>\n<h2 id=\"读取内容的方法\"><a href=\"#读取内容的方法\" class=\"headerlink\" title=\"读取内容的方法\"></a>读取内容的方法</h2><p>1.read():一次读取整个文件，不适用于大文件    </p>\n<p>2.readline():一次读取一行，占内存小，速度慢效率低    </p>\n<p>3.readlines():一次性读取，将内容分析成一个行的列表，可以由for…in…处理</p>\n"},{"title":"STL源码之空间配置器","author":"Meredith Ma","date":"2019-11-11T13:53:04.000Z","_content":"##<font face=\"隶书\"> STL规范接口(allocator)</font>\n<br/>\n```\nvalue_type /&nbsp;size_type /&nbsp;difference_type\n\npointer / const_pointer /reference / const_reference\n\nrebind\n\nallocator() / allocator(const allocator&amp;): default constructor / copy constructor\n\ntemplate <class U>allocator::allocator(const allocator<u>) //泛化的拷贝构造函数\n\n~allocator()\n\npointer_address(reference x) const / const pointer address(const_reference x) const //返回对象地址, a.address(x)==x\n\npointer allocate(seize_type n, const void*=0)\n\nvoid deallocate(pointer p, size_type n)\n\nsize_type max_size() const\n\nvoid construct(pointer p, const T&amp; x)/destroy(pointer p)\n```\n<br/>\n##<font face=\"隶书\"> SGI空间配置器std：：alloc </font>\n<br/>\n\n###<font face=\"隶书\" color='red'>sgi内存配置写法</font>\n\n<font face=\"隶书\">若要使用sgi的特殊空间配置器，写法为 </font>\n\n\tvector<int, std::alloc> iv;\n\n<font face=\"隶书\">sgi标准空间配置器std::allocator: 效率不佳，对new和delete做了一层简单包装</font>\n\n###<font face=\"隶书\" color='red'>sgi将配置划分为对象操作和内存操作</font>\n\n<font face=\"隶书\">sgi对内存配置及释放进行了细化，将对内存的操作和对对象的操作分开来操作</font>\n\n\t<stl::alloc.h> //内存分配和释放\n\t\t: : allocate() //内存空间配置\n\t\t: : deallocate() //内存空间释放\n\t<stl::construct.h> //对象构造和析构\n\t\t: : construct() //内存空间配置\n\t\t: : destroy() //内存空间释放\n\n<p><u><img src=\"https://upload-images.jianshu.io/upload_images/3736230-3b3e69ae900b4f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/967/format/webp\" /></u></p>\n\n###<font face=\"隶书\" color='red'>对象的构造析构</font>\n\n<font face=\"隶书\">construct 只有一个版本，接受一个指针和一个初值，将初值付给指针指向的区域</font>\n\n\tconstruct(T1* p, const T2&amp; value): new (p) T1(value);\n\n<font face=\"隶书\">destroy有两个版本，第一个是将指针所指对象析构，调用对象的析构函数即可。第二个是接受first，last两个迭代器，将左闭右开区间对象析构。</font>\n\n<font face=\"隶书\">对于第二个版本，为了提升效率，避免不必要的析构操作，先判断其析构函数类型，即：</font>\n\n\tvalue_type() //获取迭代对象类型\n\t__type_traits //判断其析构函数\n\tif __true_type //pass\n\telse if __false_type //循环析构\n\n###<font face=\"隶书\" color='red'>内存的分配释放</font>\n\n<font face=\"隶书\" size='5'>\n- 设计遵循以下原则：</font>\n<font face=\"隶书\">\n<ul>\n\t<li>向system heap要求空间</li>\n\t<li>考虑多线程(multi-threads)状态</li>\n\t<li>考虑内存不足时应变措施</li>\n\t<li>考虑过多&ldquo;小型区块&rdquo;可能造成的内存碎片问题</li>\n</ul>\n</font>\n\n<p><img src=\"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2074971254,1170967547&amp;fm=15&amp;gp=0.jpg\" /></p>\n\n<br/><font face=\"隶书\">\n<strong><font size='5'>- new_handler机制：</font></strong><br/>\nset_new_handler()允许指定一个函数，在new内存分配失败后被调用，声明与<new.h>中</new.h>\n</font>\n\n<pre>\n1 namespace std\n2 {\n3     typedef void (*new_handler)();\n4     new_handler set_new_handler(new handler p) throw();\n5 }\n</pre>\n<font face=\"隶书\">\n<p>具体参考：博文[Effective_C++_条款四十九：了解new_handler的行为](https://www.cnblogs.com/jerry19880126/p/3722531.html)和 《Effective C++》2e条款7。<br/>另：若要在不同类里定制不同的new_handler机制，由于编译器要求set_new_handler是静态的，所以不能通过构造函数传入，只能将set_new_handler和operator new都写成静态的，同时定义一个静态的new_handler变量。</p>\n\n<br/><font face=\"隶书\" size=5 >- 为什么使用两级配置器？</font>\n\n<font face=\"隶书\" >当所需要分配的区块足够大时，直接使用第一级配置器。但当需要的区块比较小，数量有比较多的情况下，每次使用malloc申请的内存存在内存破碎的问题，且产生overhead的问题，故采用复杂的内存池memory pool来整理。所以是为了更高效的进行内存管理。</font>\n\n<br/><font face=\"隶书\" size=5 >- 第一级配置器</font>\n\n<p><img alt=\"å¨è¿éæå¥å¾çæè¿°\" src=\"http://www.pianshen.com/images/120/ac577e8ebbebdd5824adeaefedca2b80.png\" /></p>\n<font face=\"隶书\">第一级配置器以malloc(),free(),realloc()等C函数来执行实际的内存配置、释放、重配置操作，并实现出类似C++ new_handler的机制。他不能直接使用C++的new_handler，是因为它并非使用::operator new来配置内存。<br/><br/>new handler机制是指可以要求再系统内存配置失败时调用指定的函数，即在抛出bad_alloc之前，先调用客户端指定的处理例程new_handler。<br/><br/>为什么SGI使用c中的malloc而不是c++中的operator new？<br/><br/>一是历史原因，二是c++并未提供相应的realloc()的内存配置操作<br/><br/>需要注意的是，第一级配置器allocate()和realloc()都是在调用malloc()和realloc()失败后，改调用oom_malloc()和oom_realloc()【即使用类似new_handler的机制】,之后后两者中都有内循环不断调用“内存不足处理例程”，直到满足任务，但若并未设置“内存不足处理程序”,那么就直接抛出__THROW_BAD_ALLOC丢出bac_alloc异常信息，或利用exit(1)终止程序。</font>\n<br/><br/><font face=\"隶书\" size=5>- 第二级配置器</font><br/>\n```c++\n//target:返回一个大小为n的对象，并可能加入大小为n的其他区块到free list\n//调用chunk_alloc()缺省取得20个新节点\n//if 只获得了一个节点：\n//\t直接返回客户\n//else:\n//\t在chunk空间内建立free list\nstatic void *refill(size_t n);\n//配置一大块空间，可容纳nobjs个大小为size的区块\n//若无法满足nobjs个，则会返回小于nobjs个\n//if 内存池满足需求：\n//\treturn；\n//else if 不能完全满足需求：\n//\t返回剩余的这些 return；\n//else: //此时bytes_left<size\n//\t将剩余的编入freelist中其他更小的区块链\n//\tmalloc heap中的内存给内存池，malloc的大小为需求的两倍+常数（size*nobjs*2+C）\n//\tif mallo_heap 失败：\n//\t\t重新检视freelist，将比需求的size大的区块链中区块取一块放入内存池中，重新其调用自己 return；\n//\t\t若上行失败，调用第一级配置器，试图使用oom处理例程\n//\t调整内存池状态，修改nobjs return；\nstatic char *chunk_alloc(size_t size, int &nobjs);\n//if n>128 : \n//\t调用第一级配置器\n//else if freelist有可用区块: \n//\t直接用\n//else :\n//\t将n上调至8的倍数边界\n//\trefill()为freelist重新填充空间\nstatic void* allocate(size_t n);\n\n```\n<font face=\"隶书\">· refill(size_t n)的作用是<strong>补充freelist</strong>中大小为n的区块链，内部调用chunk_alloc(n,nobjs)来从内存池中获取nobjs个n大小的区块，然后调整freelist\n<br/>\n· chunk_alloc(n,nobjs)从内存中池返回区块，若内存池不够，<strong>补充内存池</strong>（heap，>n的freelist，第一级配置器）\n</font>\n\n<br/><br/><font face=\"隶书\" size=5>- 内存基本处理工具</font><br/>\n<font face=\"隶书\">STL定义了5个全局函数，作用域未初始化空间上，前两个是construct()和destruct()，剩下三个uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n()对应于高层次函数copy(),fill(),fill_n()这些STL算法</font>\n\n<font face=\"隶书\">· uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result)</font><br/>\n<font face=\"隶书\">construct(&*(result+(i-first)),i),使得内存的配置与对象的构造行为分离开来，使用copy constructor为输入来源每个位置在输出范围内产生响应对象。要求其具有“commit or rollback”，即要么构造出所有元素、要么不构造任何东西。</font>\n\n<font face=\"隶书\">· uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x)</font><br/>\n<font face=\"隶书\">construct(&*i,x),同上，若有任何一个发生异常，需析构之前已经构造的元素。</font>\n\n<font face=\"隶书\">· uninitialized_fill_n(ForwardIterator first, Size n, const T& x)</font><br/>\n<font face=\"隶书\">同上</font><br/><br/>\n<font face=\"隶书\">原理大致相同，即先将传入的参数使用value_type()萃取出value type，之后使用type_traits()萃取出POD性质，分别处理即可。</font>\n<br/><br/>\n<font face=\"隶书\">关于malloc，参考[2](http://blog.codinglabs.org/articles/a-malloc-tutorial.html)\n\n\n\n[1][Effective_C++_条款四十九：了解new_handler的行为](https://www.cnblogs.com/jerry19880126/p/3722531.html)<br/>\n[2][如何实现一个malloc-张洋](http://blog.codinglabs.org/articles/a-malloc-tutorial.html)","source":"_posts/STL源码之空间配置器.md","raw":"title: STL源码之空间配置器\nauthor: Meredith Ma\ndate: 2019-11-11 21:53:04\ntags:\n---\n##<font face=\"隶书\"> STL规范接口(allocator)</font>\n<br/>\n```\nvalue_type /&nbsp;size_type /&nbsp;difference_type\n\npointer / const_pointer /reference / const_reference\n\nrebind\n\nallocator() / allocator(const allocator&amp;): default constructor / copy constructor\n\ntemplate <class U>allocator::allocator(const allocator<u>) //泛化的拷贝构造函数\n\n~allocator()\n\npointer_address(reference x) const / const pointer address(const_reference x) const //返回对象地址, a.address(x)==x\n\npointer allocate(seize_type n, const void*=0)\n\nvoid deallocate(pointer p, size_type n)\n\nsize_type max_size() const\n\nvoid construct(pointer p, const T&amp; x)/destroy(pointer p)\n```\n<br/>\n##<font face=\"隶书\"> SGI空间配置器std：：alloc </font>\n<br/>\n\n###<font face=\"隶书\" color='red'>sgi内存配置写法</font>\n\n<font face=\"隶书\">若要使用sgi的特殊空间配置器，写法为 </font>\n\n\tvector<int, std::alloc> iv;\n\n<font face=\"隶书\">sgi标准空间配置器std::allocator: 效率不佳，对new和delete做了一层简单包装</font>\n\n###<font face=\"隶书\" color='red'>sgi将配置划分为对象操作和内存操作</font>\n\n<font face=\"隶书\">sgi对内存配置及释放进行了细化，将对内存的操作和对对象的操作分开来操作</font>\n\n\t<stl::alloc.h> //内存分配和释放\n\t\t: : allocate() //内存空间配置\n\t\t: : deallocate() //内存空间释放\n\t<stl::construct.h> //对象构造和析构\n\t\t: : construct() //内存空间配置\n\t\t: : destroy() //内存空间释放\n\n<p><u><img src=\"https://upload-images.jianshu.io/upload_images/3736230-3b3e69ae900b4f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/967/format/webp\" /></u></p>\n\n###<font face=\"隶书\" color='red'>对象的构造析构</font>\n\n<font face=\"隶书\">construct 只有一个版本，接受一个指针和一个初值，将初值付给指针指向的区域</font>\n\n\tconstruct(T1* p, const T2&amp; value): new (p) T1(value);\n\n<font face=\"隶书\">destroy有两个版本，第一个是将指针所指对象析构，调用对象的析构函数即可。第二个是接受first，last两个迭代器，将左闭右开区间对象析构。</font>\n\n<font face=\"隶书\">对于第二个版本，为了提升效率，避免不必要的析构操作，先判断其析构函数类型，即：</font>\n\n\tvalue_type() //获取迭代对象类型\n\t__type_traits //判断其析构函数\n\tif __true_type //pass\n\telse if __false_type //循环析构\n\n###<font face=\"隶书\" color='red'>内存的分配释放</font>\n\n<font face=\"隶书\" size='5'>\n- 设计遵循以下原则：</font>\n<font face=\"隶书\">\n<ul>\n\t<li>向system heap要求空间</li>\n\t<li>考虑多线程(multi-threads)状态</li>\n\t<li>考虑内存不足时应变措施</li>\n\t<li>考虑过多&ldquo;小型区块&rdquo;可能造成的内存碎片问题</li>\n</ul>\n</font>\n\n<p><img src=\"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2074971254,1170967547&amp;fm=15&amp;gp=0.jpg\" /></p>\n\n<br/><font face=\"隶书\">\n<strong><font size='5'>- new_handler机制：</font></strong><br/>\nset_new_handler()允许指定一个函数，在new内存分配失败后被调用，声明与<new.h>中</new.h>\n</font>\n\n<pre>\n1 namespace std\n2 {\n3     typedef void (*new_handler)();\n4     new_handler set_new_handler(new handler p) throw();\n5 }\n</pre>\n<font face=\"隶书\">\n<p>具体参考：博文[Effective_C++_条款四十九：了解new_handler的行为](https://www.cnblogs.com/jerry19880126/p/3722531.html)和 《Effective C++》2e条款7。<br/>另：若要在不同类里定制不同的new_handler机制，由于编译器要求set_new_handler是静态的，所以不能通过构造函数传入，只能将set_new_handler和operator new都写成静态的，同时定义一个静态的new_handler变量。</p>\n\n<br/><font face=\"隶书\" size=5 >- 为什么使用两级配置器？</font>\n\n<font face=\"隶书\" >当所需要分配的区块足够大时，直接使用第一级配置器。但当需要的区块比较小，数量有比较多的情况下，每次使用malloc申请的内存存在内存破碎的问题，且产生overhead的问题，故采用复杂的内存池memory pool来整理。所以是为了更高效的进行内存管理。</font>\n\n<br/><font face=\"隶书\" size=5 >- 第一级配置器</font>\n\n<p><img alt=\"å¨è¿éæå¥å¾çæè¿°\" src=\"http://www.pianshen.com/images/120/ac577e8ebbebdd5824adeaefedca2b80.png\" /></p>\n<font face=\"隶书\">第一级配置器以malloc(),free(),realloc()等C函数来执行实际的内存配置、释放、重配置操作，并实现出类似C++ new_handler的机制。他不能直接使用C++的new_handler，是因为它并非使用::operator new来配置内存。<br/><br/>new handler机制是指可以要求再系统内存配置失败时调用指定的函数，即在抛出bad_alloc之前，先调用客户端指定的处理例程new_handler。<br/><br/>为什么SGI使用c中的malloc而不是c++中的operator new？<br/><br/>一是历史原因，二是c++并未提供相应的realloc()的内存配置操作<br/><br/>需要注意的是，第一级配置器allocate()和realloc()都是在调用malloc()和realloc()失败后，改调用oom_malloc()和oom_realloc()【即使用类似new_handler的机制】,之后后两者中都有内循环不断调用“内存不足处理例程”，直到满足任务，但若并未设置“内存不足处理程序”,那么就直接抛出__THROW_BAD_ALLOC丢出bac_alloc异常信息，或利用exit(1)终止程序。</font>\n<br/><br/><font face=\"隶书\" size=5>- 第二级配置器</font><br/>\n```c++\n//target:返回一个大小为n的对象，并可能加入大小为n的其他区块到free list\n//调用chunk_alloc()缺省取得20个新节点\n//if 只获得了一个节点：\n//\t直接返回客户\n//else:\n//\t在chunk空间内建立free list\nstatic void *refill(size_t n);\n//配置一大块空间，可容纳nobjs个大小为size的区块\n//若无法满足nobjs个，则会返回小于nobjs个\n//if 内存池满足需求：\n//\treturn；\n//else if 不能完全满足需求：\n//\t返回剩余的这些 return；\n//else: //此时bytes_left<size\n//\t将剩余的编入freelist中其他更小的区块链\n//\tmalloc heap中的内存给内存池，malloc的大小为需求的两倍+常数（size*nobjs*2+C）\n//\tif mallo_heap 失败：\n//\t\t重新检视freelist，将比需求的size大的区块链中区块取一块放入内存池中，重新其调用自己 return；\n//\t\t若上行失败，调用第一级配置器，试图使用oom处理例程\n//\t调整内存池状态，修改nobjs return；\nstatic char *chunk_alloc(size_t size, int &nobjs);\n//if n>128 : \n//\t调用第一级配置器\n//else if freelist有可用区块: \n//\t直接用\n//else :\n//\t将n上调至8的倍数边界\n//\trefill()为freelist重新填充空间\nstatic void* allocate(size_t n);\n\n```\n<font face=\"隶书\">· refill(size_t n)的作用是<strong>补充freelist</strong>中大小为n的区块链，内部调用chunk_alloc(n,nobjs)来从内存池中获取nobjs个n大小的区块，然后调整freelist\n<br/>\n· chunk_alloc(n,nobjs)从内存中池返回区块，若内存池不够，<strong>补充内存池</strong>（heap，>n的freelist，第一级配置器）\n</font>\n\n<br/><br/><font face=\"隶书\" size=5>- 内存基本处理工具</font><br/>\n<font face=\"隶书\">STL定义了5个全局函数，作用域未初始化空间上，前两个是construct()和destruct()，剩下三个uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n()对应于高层次函数copy(),fill(),fill_n()这些STL算法</font>\n\n<font face=\"隶书\">· uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result)</font><br/>\n<font face=\"隶书\">construct(&*(result+(i-first)),i),使得内存的配置与对象的构造行为分离开来，使用copy constructor为输入来源每个位置在输出范围内产生响应对象。要求其具有“commit or rollback”，即要么构造出所有元素、要么不构造任何东西。</font>\n\n<font face=\"隶书\">· uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x)</font><br/>\n<font face=\"隶书\">construct(&*i,x),同上，若有任何一个发生异常，需析构之前已经构造的元素。</font>\n\n<font face=\"隶书\">· uninitialized_fill_n(ForwardIterator first, Size n, const T& x)</font><br/>\n<font face=\"隶书\">同上</font><br/><br/>\n<font face=\"隶书\">原理大致相同，即先将传入的参数使用value_type()萃取出value type，之后使用type_traits()萃取出POD性质，分别处理即可。</font>\n<br/><br/>\n<font face=\"隶书\">关于malloc，参考[2](http://blog.codinglabs.org/articles/a-malloc-tutorial.html)\n\n\n\n[1][Effective_C++_条款四十九：了解new_handler的行为](https://www.cnblogs.com/jerry19880126/p/3722531.html)<br/>\n[2][如何实现一个malloc-张洋](http://blog.codinglabs.org/articles/a-malloc-tutorial.html)","slug":"STL源码之空间配置器","published":1,"updated":"2019-11-11T13:53:05.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4r000cb9ous4en2hme","content":"<p>##<font face=\"隶书\"> STL规范接口(allocator)</font><br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value_type /&amp;nbsp;size_type /&amp;nbsp;difference_type</span><br><span class=\"line\"></span><br><span class=\"line\">pointer / const_pointer /reference / const_reference</span><br><span class=\"line\"></span><br><span class=\"line\">rebind</span><br><span class=\"line\"></span><br><span class=\"line\">allocator() / allocator(const allocator&amp;amp;): default constructor / copy constructor</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;class U&gt;allocator::allocator(const allocator&lt;u&gt;) //泛化的拷贝构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">~allocator()</span><br><span class=\"line\"></span><br><span class=\"line\">pointer_address(reference x) const / const pointer address(const_reference x) const //返回对象地址, a.address(x)==x</span><br><span class=\"line\"></span><br><span class=\"line\">pointer allocate(seize_type n, const void*=0)</span><br><span class=\"line\"></span><br><span class=\"line\">void deallocate(pointer p, size_type n)</span><br><span class=\"line\"></span><br><span class=\"line\">size_type max_size() const</span><br><span class=\"line\"></span><br><span class=\"line\">void construct(pointer p, const T&amp;amp; x)/destroy(pointer p)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>##<font face=\"隶书\"> SGI空间配置器std：：alloc </font><br><br></p>\n<p>###<font face=\"隶书\" color=\"red\">sgi内存配置写法</font></p>\n<font face=\"隶书\">若要使用sgi的特殊空间配置器，写法为 </font>\n\n<pre><code>vector&lt;int, std::alloc&gt; iv;\n</code></pre><font face=\"隶书\">sgi标准空间配置器std::allocator: 效率不佳，对new和delete做了一层简单包装</font>\n\n<p>###<font face=\"隶书\" color=\"red\">sgi将配置划分为对象操作和内存操作</font></p>\n<font face=\"隶书\">sgi对内存配置及释放进行了细化，将对内存的操作和对对象的操作分开来操作</font>\n\n<pre><code>&lt;stl::alloc.h&gt; //内存分配和释放\n    : : allocate() //内存空间配置\n    : : deallocate() //内存空间释放\n&lt;stl::construct.h&gt; //对象构造和析构\n    : : construct() //内存空间配置\n    : : destroy() //内存空间释放\n</code></pre><p><u><img src=\"https://upload-images.jianshu.io/upload_images/3736230-3b3e69ae900b4f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/967/format/webp\"></u></p>\n\n<p>###<font face=\"隶书\" color=\"red\">对象的构造析构</font></p>\n<font face=\"隶书\">construct 只有一个版本，接受一个指针和一个初值，将初值付给指针指向的区域</font>\n\n<pre><code>construct(T1* p, const T2&amp;amp; value): new (p) T1(value);\n</code></pre><font face=\"隶书\">destroy有两个版本，第一个是将指针所指对象析构，调用对象的析构函数即可。第二个是接受first，last两个迭代器，将左闭右开区间对象析构。</font>\n\n<font face=\"隶书\">对于第二个版本，为了提升效率，避免不必要的析构操作，先判断其析构函数类型，即：</font>\n\n<pre><code>value_type() //获取迭代对象类型\n__type_traits //判断其析构函数\nif __true_type //pass\nelse if __false_type //循环析构\n</code></pre><p>###<font face=\"隶书\" color=\"red\">内存的分配释放</font></p>\n<font face=\"隶书\" size=\"5\"><br>- 设计遵循以下原则：</font><br><font face=\"隶书\"><br><ul><br>    <li>向system heap要求空间</li><br>    <li>考虑多线程(multi-threads)状态</li><br>    <li>考虑内存不足时应变措施</li><br>    <li>考虑过多&ldquo;小型区块&rdquo;可能造成的内存碎片问题</li><br></ul><br></font>\n\n<p><img src=\"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2074971254,1170967547&amp;fm=15&amp;gp=0.jpg\"></p>\n\n<p><br><font face=\"隶书\"><br><strong><font size=\"5\">- new_handler机制：</font></strong><br><br>set_new_handler()允许指定一个函数，在new内存分配失败后被调用，声明与&lt;new.h&gt;中&lt;/new.h&gt;<br></font></p>\n<p><pre><br>1 namespace std<br>2 {<br>3     typedef void (*new_handler)();<br>4     new_handler set_new_handler(new handler p) throw();<br>5 }<br></pre></p>\n<font face=\"隶书\"><br><p>具体参考：博文<a href=\"https://www.cnblogs.com/jerry19880126/p/3722531.html\" target=\"_blank\" rel=\"noopener\">Effective_C++_条款四十九：了解new_handler的行为</a>和 《Effective C++》2e条款7。<br>另：若要在不同类里定制不同的new_handler机制，由于编译器要求set_new_handler是静态的，所以不能通过构造函数传入，只能将set_new_handler和operator new都写成静态的，同时定义一个静态的new_handler变量。</p><br><br><br><font face=\"隶书\" size=\"5\">- 为什么使用两级配置器？</font>\n\n<font face=\"隶书\">当所需要分配的区块足够大时，直接使用第一级配置器。但当需要的区块比较小，数量有比较多的情况下，每次使用malloc申请的内存存在内存破碎的问题，且产生overhead的问题，故采用复杂的内存池memory pool来整理。所以是为了更高效的进行内存管理。</font>\n\n<p><br><font face=\"隶书\" size=\"5\">- 第一级配置器</font></p>\n<p></p><p><img alt=\"å¨è¿éæå¥å¾çæè¿°\" src=\"http://www.pianshen.com/images/120/ac577e8ebbebdd5824adeaefedca2b80.png\"></p><p></p>\n<font face=\"隶书\">第一级配置器以malloc(),free(),realloc()等C函数来执行实际的内存配置、释放、重配置操作，并实现出类似C++ new_handler的机制。他不能直接使用C++的new_handler，是因为它并非使用::operator new来配置内存。<br><br>new handler机制是指可以要求再系统内存配置失败时调用指定的函数，即在抛出bad_alloc之前，先调用客户端指定的处理例程new_handler。<br><br>为什么SGI使用c中的malloc而不是c++中的operator new？<br><br>一是历史原因，二是c++并未提供相应的realloc()的内存配置操作<br><br>需要注意的是，第一级配置器allocate()和realloc()都是在调用malloc()和realloc()失败后，改调用oom_malloc()和oom_realloc()【即使用类似new_handler的机制】,之后后两者中都有内循环不断调用“内存不足处理例程”，直到满足任务，但若并未设置“内存不足处理程序”,那么就直接抛出__THROW_BAD_ALLOC丢出bac_alloc异常信息，或利用exit(1)终止程序。</font><br><br><br><font face=\"隶书\" size=\"5\">- 第二级配置器</font><br><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//target:返回一个大小为n的对象，并可能加入大小为n的其他区块到free list</span></span><br><span class=\"line\"><span class=\"comment\">//调用chunk_alloc()缺省取得20个新节点</span></span><br><span class=\"line\"><span class=\"comment\">//if 只获得了一个节点：</span></span><br><span class=\"line\"><span class=\"comment\">//\t直接返回客户</span></span><br><span class=\"line\"><span class=\"comment\">//else:</span></span><br><span class=\"line\"><span class=\"comment\">//\t在chunk空间内建立free list</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">refill</span><span class=\"params\">(<span class=\"keyword\">size_t</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//配置一大块空间，可容纳nobjs个大小为size的区块</span></span><br><span class=\"line\"><span class=\"comment\">//若无法满足nobjs个，则会返回小于nobjs个</span></span><br><span class=\"line\"><span class=\"comment\">//if 内存池满足需求：</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn；</span></span><br><span class=\"line\"><span class=\"comment\">//else if 不能完全满足需求：</span></span><br><span class=\"line\"><span class=\"comment\">//\t返回剩余的这些 return；</span></span><br><span class=\"line\"><span class=\"comment\">//else: //此时bytes_left&lt;size</span></span><br><span class=\"line\"><span class=\"comment\">//\t将剩余的编入freelist中其他更小的区块链</span></span><br><span class=\"line\"><span class=\"comment\">//\tmalloc heap中的内存给内存池，malloc的大小为需求的两倍+常数（size*nobjs*2+C）</span></span><br><span class=\"line\"><span class=\"comment\">//\tif mallo_heap 失败：</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t重新检视freelist，将比需求的size大的区块链中区块取一块放入内存池中，重新其调用自己 return；</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t若上行失败，调用第一级配置器，试图使用oom处理例程</span></span><br><span class=\"line\"><span class=\"comment\">//\t调整内存池状态，修改nobjs return；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">chunk_alloc</span><span class=\"params\">(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">int</span> &amp;nobjs)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//if n&gt;128 : </span></span><br><span class=\"line\"><span class=\"comment\">//\t调用第一级配置器</span></span><br><span class=\"line\"><span class=\"comment\">//else if freelist有可用区块: </span></span><br><span class=\"line\"><span class=\"comment\">//\t直接用</span></span><br><span class=\"line\"><span class=\"comment\">//else :</span></span><br><span class=\"line\"><span class=\"comment\">//\t将n上调至8的倍数边界</span></span><br><span class=\"line\"><span class=\"comment\">//\trefill()为freelist重新填充空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">allocate</span><span class=\"params\">(<span class=\"keyword\">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><br><br><font face=\"隶书\">· refill(size_t n)的作用是<strong>补充freelist</strong>中大小为n的区块链，内部调用chunk_alloc(n,nobjs)来从内存池中获取nobjs个n大小的区块，然后调整freelist<br><br><br>· chunk_alloc(n,nobjs)从内存中池返回区块，若内存池不够，<strong>补充内存池</strong>（heap，&gt;n的freelist，第一级配置器）<br></font>\n\n<p><br><br><font face=\"隶书\" size=\"5\">- 内存基本处理工具</font><br></p>\n<font face=\"隶书\">STL定义了5个全局函数，作用域未初始化空间上，前两个是construct()和destruct()，剩下三个uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n()对应于高层次函数copy(),fill(),fill_n()这些STL算法</font>\n\n<font face=\"隶书\">· uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result)</font><br><br><font face=\"隶书\">construct(&amp;*(result+(i-first)),i),使得内存的配置与对象的构造行为分离开来，使用copy constructor为输入来源每个位置在输出范围内产生响应对象。要求其具有“commit or rollback”，即要么构造出所有元素、要么不构造任何东西。</font>\n\n<font face=\"隶书\">· uninitialized_fill(ForwardIterator first, ForwardIterator last, const T&amp; x)</font><br><br><font face=\"隶书\">construct(&amp;*i,x),同上，若有任何一个发生异常，需析构之前已经构造的元素。</font>\n\n<p><font face=\"隶书\">· uninitialized_fill_n(ForwardIterator first, Size n, const T&amp; x)</font><br></p>\n<p><font face=\"隶书\">同上</font><br><br></p>\n<p><font face=\"隶书\">原理大致相同，即先将传入的参数使用value_type()萃取出value type，之后使用type_traits()萃取出POD性质，分别处理即可。</font><br><br><br></p>\n<p><font face=\"隶书\">关于malloc，参考<a href=\"http://blog.codinglabs.org/articles/a-malloc-tutorial.html\" target=\"_blank\" rel=\"noopener\">2</a></font></p>\n<p>[1]<a href=\"https://www.cnblogs.com/jerry19880126/p/3722531.html\" target=\"_blank\" rel=\"noopener\">Effective_C++_条款四十九：了解new_handler的行为</a><br><br>[2]<a href=\"http://blog.codinglabs.org/articles/a-malloc-tutorial.html\" target=\"_blank\" rel=\"noopener\">如何实现一个malloc-张洋</a></p>\n</font>","site":{"data":{}},"excerpt":"","more":"<p>##<font face=\"隶书\"> STL规范接口(allocator)</font><br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value_type /&amp;nbsp;size_type /&amp;nbsp;difference_type</span><br><span class=\"line\"></span><br><span class=\"line\">pointer / const_pointer /reference / const_reference</span><br><span class=\"line\"></span><br><span class=\"line\">rebind</span><br><span class=\"line\"></span><br><span class=\"line\">allocator() / allocator(const allocator&amp;amp;): default constructor / copy constructor</span><br><span class=\"line\"></span><br><span class=\"line\">template &lt;class U&gt;allocator::allocator(const allocator&lt;u&gt;) //泛化的拷贝构造函数</span><br><span class=\"line\"></span><br><span class=\"line\">~allocator()</span><br><span class=\"line\"></span><br><span class=\"line\">pointer_address(reference x) const / const pointer address(const_reference x) const //返回对象地址, a.address(x)==x</span><br><span class=\"line\"></span><br><span class=\"line\">pointer allocate(seize_type n, const void*=0)</span><br><span class=\"line\"></span><br><span class=\"line\">void deallocate(pointer p, size_type n)</span><br><span class=\"line\"></span><br><span class=\"line\">size_type max_size() const</span><br><span class=\"line\"></span><br><span class=\"line\">void construct(pointer p, const T&amp;amp; x)/destroy(pointer p)</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p>##<font face=\"隶书\"> SGI空间配置器std：：alloc </font><br><br></p>\n<p>###<font face=\"隶书\" color=\"red\">sgi内存配置写法</font></p>\n<font face=\"隶书\">若要使用sgi的特殊空间配置器，写法为 </font>\n\n<pre><code>vector&lt;int, std::alloc&gt; iv;\n</code></pre><font face=\"隶书\">sgi标准空间配置器std::allocator: 效率不佳，对new和delete做了一层简单包装</font>\n\n<p>###<font face=\"隶书\" color=\"red\">sgi将配置划分为对象操作和内存操作</font></p>\n<font face=\"隶书\">sgi对内存配置及释放进行了细化，将对内存的操作和对对象的操作分开来操作</font>\n\n<pre><code>&lt;stl::alloc.h&gt; //内存分配和释放\n    : : allocate() //内存空间配置\n    : : deallocate() //内存空间释放\n&lt;stl::construct.h&gt; //对象构造和析构\n    : : construct() //内存空间配置\n    : : destroy() //内存空间释放\n</code></pre><p><u><img src=\"https://upload-images.jianshu.io/upload_images/3736230-3b3e69ae900b4f41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/967/format/webp\"></u></p>\n\n<p>###<font face=\"隶书\" color=\"red\">对象的构造析构</font></p>\n<font face=\"隶书\">construct 只有一个版本，接受一个指针和一个初值，将初值付给指针指向的区域</font>\n\n<pre><code>construct(T1* p, const T2&amp;amp; value): new (p) T1(value);\n</code></pre><font face=\"隶书\">destroy有两个版本，第一个是将指针所指对象析构，调用对象的析构函数即可。第二个是接受first，last两个迭代器，将左闭右开区间对象析构。</font>\n\n<font face=\"隶书\">对于第二个版本，为了提升效率，避免不必要的析构操作，先判断其析构函数类型，即：</font>\n\n<pre><code>value_type() //获取迭代对象类型\n__type_traits //判断其析构函数\nif __true_type //pass\nelse if __false_type //循环析构\n</code></pre><p>###<font face=\"隶书\" color=\"red\">内存的分配释放</font></p>\n<font face=\"隶书\" size=\"5\"><br>- 设计遵循以下原则：</font><br><font face=\"隶书\"><br><ul><br>    <li>向system heap要求空间</li><br>    <li>考虑多线程(multi-threads)状态</li><br>    <li>考虑内存不足时应变措施</li><br>    <li>考虑过多&ldquo;小型区块&rdquo;可能造成的内存碎片问题</li><br></ul><br></font>\n\n<p><img src=\"https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=2074971254,1170967547&amp;fm=15&amp;gp=0.jpg\"></p>\n\n<p><br><font face=\"隶书\"><br><strong><font size=\"5\">- new_handler机制：</font></strong><br><br>set_new_handler()允许指定一个函数，在new内存分配失败后被调用，声明与&lt;new.h&gt;中&lt;/new.h&gt;<br></font></p>\n<p><pre><br>1 namespace std<br>2 {<br>3     typedef void (*new_handler)();<br>4     new_handler set_new_handler(new handler p) throw();<br>5 }<br></pre></p>\n<font face=\"隶书\"><br><p>具体参考：博文<a href=\"https://www.cnblogs.com/jerry19880126/p/3722531.html\" target=\"_blank\" rel=\"noopener\">Effective_C++_条款四十九：了解new_handler的行为</a>和 《Effective C++》2e条款7。<br>另：若要在不同类里定制不同的new_handler机制，由于编译器要求set_new_handler是静态的，所以不能通过构造函数传入，只能将set_new_handler和operator new都写成静态的，同时定义一个静态的new_handler变量。</p><br><br><br><font face=\"隶书\" size=\"5\">- 为什么使用两级配置器？</font>\n\n<font face=\"隶书\">当所需要分配的区块足够大时，直接使用第一级配置器。但当需要的区块比较小，数量有比较多的情况下，每次使用malloc申请的内存存在内存破碎的问题，且产生overhead的问题，故采用复杂的内存池memory pool来整理。所以是为了更高效的进行内存管理。</font>\n\n<p><br><font face=\"隶书\" size=\"5\">- 第一级配置器</font></p>\n<p></p><p><img alt=\"å¨è¿éæå¥å¾çæè¿°\" src=\"http://www.pianshen.com/images/120/ac577e8ebbebdd5824adeaefedca2b80.png\"></p><p></p>\n<font face=\"隶书\">第一级配置器以malloc(),free(),realloc()等C函数来执行实际的内存配置、释放、重配置操作，并实现出类似C++ new_handler的机制。他不能直接使用C++的new_handler，是因为它并非使用::operator new来配置内存。<br><br>new handler机制是指可以要求再系统内存配置失败时调用指定的函数，即在抛出bad_alloc之前，先调用客户端指定的处理例程new_handler。<br><br>为什么SGI使用c中的malloc而不是c++中的operator new？<br><br>一是历史原因，二是c++并未提供相应的realloc()的内存配置操作<br><br>需要注意的是，第一级配置器allocate()和realloc()都是在调用malloc()和realloc()失败后，改调用oom_malloc()和oom_realloc()【即使用类似new_handler的机制】,之后后两者中都有内循环不断调用“内存不足处理例程”，直到满足任务，但若并未设置“内存不足处理程序”,那么就直接抛出__THROW_BAD_ALLOC丢出bac_alloc异常信息，或利用exit(1)终止程序。</font><br><br><br><font face=\"隶书\" size=\"5\">- 第二级配置器</font><br><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//target:返回一个大小为n的对象，并可能加入大小为n的其他区块到free list</span></span><br><span class=\"line\"><span class=\"comment\">//调用chunk_alloc()缺省取得20个新节点</span></span><br><span class=\"line\"><span class=\"comment\">//if 只获得了一个节点：</span></span><br><span class=\"line\"><span class=\"comment\">//\t直接返回客户</span></span><br><span class=\"line\"><span class=\"comment\">//else:</span></span><br><span class=\"line\"><span class=\"comment\">//\t在chunk空间内建立free list</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">refill</span><span class=\"params\">(<span class=\"keyword\">size_t</span> n)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//配置一大块空间，可容纳nobjs个大小为size的区块</span></span><br><span class=\"line\"><span class=\"comment\">//若无法满足nobjs个，则会返回小于nobjs个</span></span><br><span class=\"line\"><span class=\"comment\">//if 内存池满足需求：</span></span><br><span class=\"line\"><span class=\"comment\">//\treturn；</span></span><br><span class=\"line\"><span class=\"comment\">//else if 不能完全满足需求：</span></span><br><span class=\"line\"><span class=\"comment\">//\t返回剩余的这些 return；</span></span><br><span class=\"line\"><span class=\"comment\">//else: //此时bytes_left&lt;size</span></span><br><span class=\"line\"><span class=\"comment\">//\t将剩余的编入freelist中其他更小的区块链</span></span><br><span class=\"line\"><span class=\"comment\">//\tmalloc heap中的内存给内存池，malloc的大小为需求的两倍+常数（size*nobjs*2+C）</span></span><br><span class=\"line\"><span class=\"comment\">//\tif mallo_heap 失败：</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t重新检视freelist，将比需求的size大的区块链中区块取一块放入内存池中，重新其调用自己 return；</span></span><br><span class=\"line\"><span class=\"comment\">//\t\t若上行失败，调用第一级配置器，试图使用oom处理例程</span></span><br><span class=\"line\"><span class=\"comment\">//\t调整内存池状态，修改nobjs return；</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *<span class=\"title\">chunk_alloc</span><span class=\"params\">(<span class=\"keyword\">size_t</span> size, <span class=\"keyword\">int</span> &amp;nobjs)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">//if n&gt;128 : </span></span><br><span class=\"line\"><span class=\"comment\">//\t调用第一级配置器</span></span><br><span class=\"line\"><span class=\"comment\">//else if freelist有可用区块: </span></span><br><span class=\"line\"><span class=\"comment\">//\t直接用</span></span><br><span class=\"line\"><span class=\"comment\">//else :</span></span><br><span class=\"line\"><span class=\"comment\">//\t将n上调至8的倍数边界</span></span><br><span class=\"line\"><span class=\"comment\">//\trefill()为freelist重新填充空间</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">allocate</span><span class=\"params\">(<span class=\"keyword\">size_t</span> n)</span></span>;</span><br></pre></td></tr></table></figure><br><br><font face=\"隶书\">· refill(size_t n)的作用是<strong>补充freelist</strong>中大小为n的区块链，内部调用chunk_alloc(n,nobjs)来从内存池中获取nobjs个n大小的区块，然后调整freelist<br><br><br>· chunk_alloc(n,nobjs)从内存中池返回区块，若内存池不够，<strong>补充内存池</strong>（heap，&gt;n的freelist，第一级配置器）<br></font>\n\n<p><br><br><font face=\"隶书\" size=\"5\">- 内存基本处理工具</font><br></p>\n<font face=\"隶书\">STL定义了5个全局函数，作用域未初始化空间上，前两个是construct()和destruct()，剩下三个uninitialized_copy(),uninitialized_fill(),uninitialized_fill_n()对应于高层次函数copy(),fill(),fill_n()这些STL算法</font>\n\n<font face=\"隶书\">· uninitialized_copy(InputIterator first, InputIterator last, ForwardIterator result)</font><br><br><font face=\"隶书\">construct(&amp;*(result+(i-first)),i),使得内存的配置与对象的构造行为分离开来，使用copy constructor为输入来源每个位置在输出范围内产生响应对象。要求其具有“commit or rollback”，即要么构造出所有元素、要么不构造任何东西。</font>\n\n<font face=\"隶书\">· uninitialized_fill(ForwardIterator first, ForwardIterator last, const T&amp; x)</font><br><br><font face=\"隶书\">construct(&amp;*i,x),同上，若有任何一个发生异常，需析构之前已经构造的元素。</font>\n\n<p><font face=\"隶书\">· uninitialized_fill_n(ForwardIterator first, Size n, const T&amp; x)</font><br></p>\n<p><font face=\"隶书\">同上</font><br><br></p>\n<p><font face=\"隶书\">原理大致相同，即先将传入的参数使用value_type()萃取出value type，之后使用type_traits()萃取出POD性质，分别处理即可。</font><br><br><br></p>\n<p><font face=\"隶书\">关于malloc，参考<a href=\"http://blog.codinglabs.org/articles/a-malloc-tutorial.html\" target=\"_blank\" rel=\"noopener\">2</a></font></p>\n<p>[1]<a href=\"https://www.cnblogs.com/jerry19880126/p/3722531.html\" target=\"_blank\" rel=\"noopener\">Effective_C++_条款四十九：了解new_handler的行为</a><br><br>[2]<a href=\"http://blog.codinglabs.org/articles/a-malloc-tutorial.html\" target=\"_blank\" rel=\"noopener\">如何实现一个malloc-张洋</a></p>\n</font>"},{"title":"TCP状态转换","author":"Meredith Ma","date":"2019-11-11T15:48:00.000Z","_content":"\n![upload successful](/images/image.png)\n\n![filename already exists, renamed](/images/pasted-1.png)\n\nhttps://blog.csdn.net/huangyimo/article/details/81505558","source":"_posts/TCP状态转换.md","raw":"title: TCP状态转换\nauthor: Meredith Ma\ntags:\n  - TCP\n  - SOCKET\n  - 计算机网络\n  - TIME_WAIT\n  - netstat\ncategories:\n  - 计算机网络\ndate: 2019-11-11 23:48:00\n---\n\n![upload successful](/images/image.png)\n\n![filename already exists, renamed](/images/pasted-1.png)\n\nhttps://blog.csdn.net/huangyimo/article/details/81505558","slug":"TCP状态转换","published":1,"updated":"2019-11-11T15:49:52.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4w000fb9ouv6a7kmk7","content":"<p><img src=\"/images/image.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-1.png\" alt=\"filename already exists, renamed\"></p>\n<p><a href=\"https://blog.csdn.net/huangyimo/article/details/81505558\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huangyimo/article/details/81505558</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/images/image.png\" alt=\"upload successful\"></p>\n<p><img src=\"/images/pasted-1.png\" alt=\"filename already exists, renamed\"></p>\n<p><a href=\"https://blog.csdn.net/huangyimo/article/details/81505558\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/huangyimo/article/details/81505558</a></p>\n"},{"title":"小林子的第一封家书","type":"tags","author":"Meredith Ma","date":"2018-07-19T07:20:00.000Z","update":"2018-07-19T16:00:00.000Z","_content":"你呀，说好的要给我邮件写信，久久没有音讯，结果还是我先给你写了，你个混蛋。\n明天就是你去广州的日子咯，是你人生另一个重要的开始阶段，本着小小的私心，我想在你人生的每一个阶段都留下涟漪。\n我知道，在大学本科，你肯定留下了许多遗憾，除了认识我2333（emmm...自恋了一下）。\n很多定下的目标没有实现，你也自责过吧。你曾提过，自己本科代码没有好好写，项目没有好好做，自己玩心太重了。\n这次去中山，就要好好管住你的玩心哦。\n你一向是一个往前看不往后看的人，我相信你不会对过去自怨自艾，会好好努力。\n但是你有时又像个小孩子，管不住自己的情绪，容易烦躁，所以有压力大的事或者烦躁不开心的事要及时和我说，不要自己憋在心里。\n你要记得，这次你去广州，最大的不同，是你有了伴侣，有了牵挂。\n不要像大一刚上大学那样茫然无措，感觉自己漂泊他乡，孤苦伶仃，感觉自己一个人，很孤独。\n（你大一给自己加太多戏了吧啊喂！谁不是一个人去的大学啊，你个敏感脆弱还死不承认的死傲娇【误）\n现在你有我，我会一直陪着你的，你放心。\n\n你呀，这次你去广州，我还挺不放心你的。\n我知道你喜欢有内涵的女孩子，我想你的研究生同学都是积极向上，聪明强大的开朗的女孩子吧。\n虽然你一直说都是男生，可是不可能没有女生，那寥寥几个女生岂不是显得更弥足珍贵引人（你）注意？\n好担心啊好担心。\n我对自己没有什么信心，在相处的过程中，你也觉得发现了很多我的缺点，多次惹得你生气。\n我还不会照顾人，山遥路远的，万一你身体不舒服，朋友对你照顾有加，你还不感动的涕泪直流啊。\n你在学习，我在工作，我很担心我们的生活圈子渐行渐远，会找不到共同的话题。\n所以你要向我工作时那样，把身边的人和事说与我听，让我了解你之后的生活，\n这样我们才不会有太多的代沟哦，就像我们就在彼此身边一样。\n\n可能是最近看多了探虚陵吧，我对小说的代入感一向很强，自己的情绪也被感染了。\n每次看到发糖的情节，都情不自禁地想起你，想着你在干什么，有没有想我。\n那种生死相随的画面，看多了连我也伤感了，觉得人生短暂，真想和你一直生活下去，我竟也想长生了？？\n看了探虚陵，也渐渐懂了一些感情，有时人物的心境和我不谋而合，我就会再确认一遍对你的喜欢。\n这样反复确认，加深又加深，我对你的感情也深不可测了。\n你说我和师师有点像，我没看出来，但我倒觉得你和洛神有点像。\n初认识你时，你给我的感觉也是那样清清冷冷，生分得很，我也因为这样怪了你一阵子。\n熟识了呢，你变得会撒娇，会生气，会掉眼泪，还喜欢对我笑，刚认识的时候你可没怎么对我笑过呢！！冷淡的很。\n每次你一笑啊，我也特别开心，我特别喜欢你开心的样子，忍不住会多看几眼。\n\n其实我也不知道你长得到底好不好看，以前没怎么看你，也不关注你的外貌，现在大概是情人眼里出西施，也不能作数的。\n在一起久了，我就喜欢看你，怎么看怎么可爱，怎么看怎么好看，在睡觉的时候我可是偷偷摸过好几次你脸的轮廓呢嘻嘻嘻（嘘~）\n尤其喜欢你的鼻子，鼻尖微微上翘，带着几丝俏皮，有一种小巧玲珑很秀气的感觉。\n喜欢你板正的身板，特别正经，正经中带着一点可爱。\n对了，你的颈椎不好，不管研究生任务多繁重，一段时间也要起来活动活动，花不了多少时间的。\n身体最重要，就算不能长生，也要活到一百岁哦，这样就能说，我们的爱跨越了一个世纪了~\n老是说你胖，但是你嘴上说着减肥，却管不住吃哈哈哈。\n其实还好啦，这样刚刚好，特别喜欢用我的脸贴着你的脸揉，像棉花糖，软软的很舒服。\n\n去广州记得写信哦，不要嫌字丑，我喜欢你的字，比我的字好看多了~\n你呀，和我在一起还有偶像包袱，连睡觉都要整理刘海，总有一天我要把你那刘海掀起来~诶嘿嘿\n去新宿舍要和室友好好相处哦，这点我不担心，你总有一种魔力让人不由自主喜欢你，可能我就是这样陷进去的吧///.////\n但是也不能太亲密哦！不许和室友撒娇，物理距离不许太近，不然我会生气的！\n你给你表妹发个朋友圈，你不知道我有多嫉妒呢，\n不过是家人就算咯，朋友可不许！\n哎呀不行，一想到这些，我就没信心，\n不要太放肆，你可是我的。\n\n好好照顾自己，我也会好好照顾我自己，你不用太操心。\n我现在厨艺比以前好多了，以前不喜欢做菜，像是在做任务，\n现在会慢慢研究一些菜谱，也越来越有耐心了。\n每次我心情一有点低落，我就会想起你和我说的要往前看，然后去找点事情做，让生活变得充实。\n生活一切都好，除了不可抑制的想你。\n你说叫你亲爱的，我却好想一直叫你的名字呢，想在你耳边，一直叫你的名字。\n我爱你，我确定。\n\n刚分开就在想你，连和你在一起，也觉得不够，总想和你更亲近，真的好想变小被你放在口袋里！\n期待着我们下一次见面的日子，我发现啊，我越来越离不开你了。\n(肯定是你的阴谋！哼哼)\n有时会幻想我们以后一起生活的样子，或者我们再次见面我飞扑像你的样子，\n或者你被我惹得娇喘连连的样子【误\n好想快点开始属于我们俩的余生~\n一想到这些，我就对生活充满感激，感谢让我遇到你。\n我什么也不怕，和你在一起，是我最正确的决定。\n今生，愿一直相伴在你左右。\n不行，还是生生世世吧，下辈子下下辈子你也不许去撩别人！！\n\n好啦。\n硕士研究生马蒙蒙，做好准备，迎接你全新的美好生活哦~\n爱你的，林雪。\n\n2018年6月8日\n","source":"_posts/hello-world.md","raw":"title: 小林子的第一封家书\ntype: tags\ntags:\n  - 家书\ncategories:\n  - 家书\nauthor: Meredith Ma\ndate: 2018-07-19 15:20:00\nupdate: 2018-07-20 00:00:00\n---\n你呀，说好的要给我邮件写信，久久没有音讯，结果还是我先给你写了，你个混蛋。\n明天就是你去广州的日子咯，是你人生另一个重要的开始阶段，本着小小的私心，我想在你人生的每一个阶段都留下涟漪。\n我知道，在大学本科，你肯定留下了许多遗憾，除了认识我2333（emmm...自恋了一下）。\n很多定下的目标没有实现，你也自责过吧。你曾提过，自己本科代码没有好好写，项目没有好好做，自己玩心太重了。\n这次去中山，就要好好管住你的玩心哦。\n你一向是一个往前看不往后看的人，我相信你不会对过去自怨自艾，会好好努力。\n但是你有时又像个小孩子，管不住自己的情绪，容易烦躁，所以有压力大的事或者烦躁不开心的事要及时和我说，不要自己憋在心里。\n你要记得，这次你去广州，最大的不同，是你有了伴侣，有了牵挂。\n不要像大一刚上大学那样茫然无措，感觉自己漂泊他乡，孤苦伶仃，感觉自己一个人，很孤独。\n（你大一给自己加太多戏了吧啊喂！谁不是一个人去的大学啊，你个敏感脆弱还死不承认的死傲娇【误）\n现在你有我，我会一直陪着你的，你放心。\n\n你呀，这次你去广州，我还挺不放心你的。\n我知道你喜欢有内涵的女孩子，我想你的研究生同学都是积极向上，聪明强大的开朗的女孩子吧。\n虽然你一直说都是男生，可是不可能没有女生，那寥寥几个女生岂不是显得更弥足珍贵引人（你）注意？\n好担心啊好担心。\n我对自己没有什么信心，在相处的过程中，你也觉得发现了很多我的缺点，多次惹得你生气。\n我还不会照顾人，山遥路远的，万一你身体不舒服，朋友对你照顾有加，你还不感动的涕泪直流啊。\n你在学习，我在工作，我很担心我们的生活圈子渐行渐远，会找不到共同的话题。\n所以你要向我工作时那样，把身边的人和事说与我听，让我了解你之后的生活，\n这样我们才不会有太多的代沟哦，就像我们就在彼此身边一样。\n\n可能是最近看多了探虚陵吧，我对小说的代入感一向很强，自己的情绪也被感染了。\n每次看到发糖的情节，都情不自禁地想起你，想着你在干什么，有没有想我。\n那种生死相随的画面，看多了连我也伤感了，觉得人生短暂，真想和你一直生活下去，我竟也想长生了？？\n看了探虚陵，也渐渐懂了一些感情，有时人物的心境和我不谋而合，我就会再确认一遍对你的喜欢。\n这样反复确认，加深又加深，我对你的感情也深不可测了。\n你说我和师师有点像，我没看出来，但我倒觉得你和洛神有点像。\n初认识你时，你给我的感觉也是那样清清冷冷，生分得很，我也因为这样怪了你一阵子。\n熟识了呢，你变得会撒娇，会生气，会掉眼泪，还喜欢对我笑，刚认识的时候你可没怎么对我笑过呢！！冷淡的很。\n每次你一笑啊，我也特别开心，我特别喜欢你开心的样子，忍不住会多看几眼。\n\n其实我也不知道你长得到底好不好看，以前没怎么看你，也不关注你的外貌，现在大概是情人眼里出西施，也不能作数的。\n在一起久了，我就喜欢看你，怎么看怎么可爱，怎么看怎么好看，在睡觉的时候我可是偷偷摸过好几次你脸的轮廓呢嘻嘻嘻（嘘~）\n尤其喜欢你的鼻子，鼻尖微微上翘，带着几丝俏皮，有一种小巧玲珑很秀气的感觉。\n喜欢你板正的身板，特别正经，正经中带着一点可爱。\n对了，你的颈椎不好，不管研究生任务多繁重，一段时间也要起来活动活动，花不了多少时间的。\n身体最重要，就算不能长生，也要活到一百岁哦，这样就能说，我们的爱跨越了一个世纪了~\n老是说你胖，但是你嘴上说着减肥，却管不住吃哈哈哈。\n其实还好啦，这样刚刚好，特别喜欢用我的脸贴着你的脸揉，像棉花糖，软软的很舒服。\n\n去广州记得写信哦，不要嫌字丑，我喜欢你的字，比我的字好看多了~\n你呀，和我在一起还有偶像包袱，连睡觉都要整理刘海，总有一天我要把你那刘海掀起来~诶嘿嘿\n去新宿舍要和室友好好相处哦，这点我不担心，你总有一种魔力让人不由自主喜欢你，可能我就是这样陷进去的吧///.////\n但是也不能太亲密哦！不许和室友撒娇，物理距离不许太近，不然我会生气的！\n你给你表妹发个朋友圈，你不知道我有多嫉妒呢，\n不过是家人就算咯，朋友可不许！\n哎呀不行，一想到这些，我就没信心，\n不要太放肆，你可是我的。\n\n好好照顾自己，我也会好好照顾我自己，你不用太操心。\n我现在厨艺比以前好多了，以前不喜欢做菜，像是在做任务，\n现在会慢慢研究一些菜谱，也越来越有耐心了。\n每次我心情一有点低落，我就会想起你和我说的要往前看，然后去找点事情做，让生活变得充实。\n生活一切都好，除了不可抑制的想你。\n你说叫你亲爱的，我却好想一直叫你的名字呢，想在你耳边，一直叫你的名字。\n我爱你，我确定。\n\n刚分开就在想你，连和你在一起，也觉得不够，总想和你更亲近，真的好想变小被你放在口袋里！\n期待着我们下一次见面的日子，我发现啊，我越来越离不开你了。\n(肯定是你的阴谋！哼哼)\n有时会幻想我们以后一起生活的样子，或者我们再次见面我飞扑像你的样子，\n或者你被我惹得娇喘连连的样子【误\n好想快点开始属于我们俩的余生~\n一想到这些，我就对生活充满感激，感谢让我遇到你。\n我什么也不怕，和你在一起，是我最正确的决定。\n今生，愿一直相伴在你左右。\n不行，还是生生世世吧，下辈子下下辈子你也不许去撩别人！！\n\n好啦。\n硕士研究生马蒙蒙，做好准备，迎接你全新的美好生活哦~\n爱你的，林雪。\n\n2018年6月8日\n","slug":"hello-world","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv4y000gb9oujz1c5vgt","content":"<p>你呀，说好的要给我邮件写信，久久没有音讯，结果还是我先给你写了，你个混蛋。<br>明天就是你去广州的日子咯，是你人生另一个重要的开始阶段，本着小小的私心，我想在你人生的每一个阶段都留下涟漪。<br>我知道，在大学本科，你肯定留下了许多遗憾，除了认识我2333（emmm…自恋了一下）。<br>很多定下的目标没有实现，你也自责过吧。你曾提过，自己本科代码没有好好写，项目没有好好做，自己玩心太重了。<br>这次去中山，就要好好管住你的玩心哦。<br>你一向是一个往前看不往后看的人，我相信你不会对过去自怨自艾，会好好努力。<br>但是你有时又像个小孩子，管不住自己的情绪，容易烦躁，所以有压力大的事或者烦躁不开心的事要及时和我说，不要自己憋在心里。<br>你要记得，这次你去广州，最大的不同，是你有了伴侣，有了牵挂。<br>不要像大一刚上大学那样茫然无措，感觉自己漂泊他乡，孤苦伶仃，感觉自己一个人，很孤独。<br>（你大一给自己加太多戏了吧啊喂！谁不是一个人去的大学啊，你个敏感脆弱还死不承认的死傲娇【误）<br>现在你有我，我会一直陪着你的，你放心。</p>\n<p>你呀，这次你去广州，我还挺不放心你的。<br>我知道你喜欢有内涵的女孩子，我想你的研究生同学都是积极向上，聪明强大的开朗的女孩子吧。<br>虽然你一直说都是男生，可是不可能没有女生，那寥寥几个女生岂不是显得更弥足珍贵引人（你）注意？<br>好担心啊好担心。<br>我对自己没有什么信心，在相处的过程中，你也觉得发现了很多我的缺点，多次惹得你生气。<br>我还不会照顾人，山遥路远的，万一你身体不舒服，朋友对你照顾有加，你还不感动的涕泪直流啊。<br>你在学习，我在工作，我很担心我们的生活圈子渐行渐远，会找不到共同的话题。<br>所以你要向我工作时那样，把身边的人和事说与我听，让我了解你之后的生活，<br>这样我们才不会有太多的代沟哦，就像我们就在彼此身边一样。</p>\n<p>可能是最近看多了探虚陵吧，我对小说的代入感一向很强，自己的情绪也被感染了。<br>每次看到发糖的情节，都情不自禁地想起你，想着你在干什么，有没有想我。<br>那种生死相随的画面，看多了连我也伤感了，觉得人生短暂，真想和你一直生活下去，我竟也想长生了？？<br>看了探虚陵，也渐渐懂了一些感情，有时人物的心境和我不谋而合，我就会再确认一遍对你的喜欢。<br>这样反复确认，加深又加深，我对你的感情也深不可测了。<br>你说我和师师有点像，我没看出来，但我倒觉得你和洛神有点像。<br>初认识你时，你给我的感觉也是那样清清冷冷，生分得很，我也因为这样怪了你一阵子。<br>熟识了呢，你变得会撒娇，会生气，会掉眼泪，还喜欢对我笑，刚认识的时候你可没怎么对我笑过呢！！冷淡的很。<br>每次你一笑啊，我也特别开心，我特别喜欢你开心的样子，忍不住会多看几眼。</p>\n<p>其实我也不知道你长得到底好不好看，以前没怎么看你，也不关注你的外貌，现在大概是情人眼里出西施，也不能作数的。<br>在一起久了，我就喜欢看你，怎么看怎么可爱，怎么看怎么好看，在睡觉的时候我可是偷偷摸过好几次你脸的轮廓呢嘻嘻嘻（嘘~）<br>尤其喜欢你的鼻子，鼻尖微微上翘，带着几丝俏皮，有一种小巧玲珑很秀气的感觉。<br>喜欢你板正的身板，特别正经，正经中带着一点可爱。<br>对了，你的颈椎不好，不管研究生任务多繁重，一段时间也要起来活动活动，花不了多少时间的。<br>身体最重要，就算不能长生，也要活到一百岁哦，这样就能说，我们的爱跨越了一个世纪了~<br>老是说你胖，但是你嘴上说着减肥，却管不住吃哈哈哈。<br>其实还好啦，这样刚刚好，特别喜欢用我的脸贴着你的脸揉，像棉花糖，软软的很舒服。</p>\n<p>去广州记得写信哦，不要嫌字丑，我喜欢你的字，比我的字好看多了~<br>你呀，和我在一起还有偶像包袱，连睡觉都要整理刘海，总有一天我要把你那刘海掀起来~诶嘿嘿<br>去新宿舍要和室友好好相处哦，这点我不担心，你总有一种魔力让人不由自主喜欢你，可能我就是这样陷进去的吧///.////<br>但是也不能太亲密哦！不许和室友撒娇，物理距离不许太近，不然我会生气的！<br>你给你表妹发个朋友圈，你不知道我有多嫉妒呢，<br>不过是家人就算咯，朋友可不许！<br>哎呀不行，一想到这些，我就没信心，<br>不要太放肆，你可是我的。</p>\n<p>好好照顾自己，我也会好好照顾我自己，你不用太操心。<br>我现在厨艺比以前好多了，以前不喜欢做菜，像是在做任务，<br>现在会慢慢研究一些菜谱，也越来越有耐心了。<br>每次我心情一有点低落，我就会想起你和我说的要往前看，然后去找点事情做，让生活变得充实。<br>生活一切都好，除了不可抑制的想你。<br>你说叫你亲爱的，我却好想一直叫你的名字呢，想在你耳边，一直叫你的名字。<br>我爱你，我确定。</p>\n<p>刚分开就在想你，连和你在一起，也觉得不够，总想和你更亲近，真的好想变小被你放在口袋里！<br>期待着我们下一次见面的日子，我发现啊，我越来越离不开你了。<br>(肯定是你的阴谋！哼哼)<br>有时会幻想我们以后一起生活的样子，或者我们再次见面我飞扑像你的样子，<br>或者你被我惹得娇喘连连的样子【误<br>好想快点开始属于我们俩的余生~<br>一想到这些，我就对生活充满感激，感谢让我遇到你。<br>我什么也不怕，和你在一起，是我最正确的决定。<br>今生，愿一直相伴在你左右。<br>不行，还是生生世世吧，下辈子下下辈子你也不许去撩别人！！</p>\n<p>好啦。<br>硕士研究生马蒙蒙，做好准备，迎接你全新的美好生活哦~<br>爱你的，林雪。</p>\n<p>2018年6月8日</p>\n","site":{"data":{}},"excerpt":"","more":"<p>你呀，说好的要给我邮件写信，久久没有音讯，结果还是我先给你写了，你个混蛋。<br>明天就是你去广州的日子咯，是你人生另一个重要的开始阶段，本着小小的私心，我想在你人生的每一个阶段都留下涟漪。<br>我知道，在大学本科，你肯定留下了许多遗憾，除了认识我2333（emmm…自恋了一下）。<br>很多定下的目标没有实现，你也自责过吧。你曾提过，自己本科代码没有好好写，项目没有好好做，自己玩心太重了。<br>这次去中山，就要好好管住你的玩心哦。<br>你一向是一个往前看不往后看的人，我相信你不会对过去自怨自艾，会好好努力。<br>但是你有时又像个小孩子，管不住自己的情绪，容易烦躁，所以有压力大的事或者烦躁不开心的事要及时和我说，不要自己憋在心里。<br>你要记得，这次你去广州，最大的不同，是你有了伴侣，有了牵挂。<br>不要像大一刚上大学那样茫然无措，感觉自己漂泊他乡，孤苦伶仃，感觉自己一个人，很孤独。<br>（你大一给自己加太多戏了吧啊喂！谁不是一个人去的大学啊，你个敏感脆弱还死不承认的死傲娇【误）<br>现在你有我，我会一直陪着你的，你放心。</p>\n<p>你呀，这次你去广州，我还挺不放心你的。<br>我知道你喜欢有内涵的女孩子，我想你的研究生同学都是积极向上，聪明强大的开朗的女孩子吧。<br>虽然你一直说都是男生，可是不可能没有女生，那寥寥几个女生岂不是显得更弥足珍贵引人（你）注意？<br>好担心啊好担心。<br>我对自己没有什么信心，在相处的过程中，你也觉得发现了很多我的缺点，多次惹得你生气。<br>我还不会照顾人，山遥路远的，万一你身体不舒服，朋友对你照顾有加，你还不感动的涕泪直流啊。<br>你在学习，我在工作，我很担心我们的生活圈子渐行渐远，会找不到共同的话题。<br>所以你要向我工作时那样，把身边的人和事说与我听，让我了解你之后的生活，<br>这样我们才不会有太多的代沟哦，就像我们就在彼此身边一样。</p>\n<p>可能是最近看多了探虚陵吧，我对小说的代入感一向很强，自己的情绪也被感染了。<br>每次看到发糖的情节，都情不自禁地想起你，想着你在干什么，有没有想我。<br>那种生死相随的画面，看多了连我也伤感了，觉得人生短暂，真想和你一直生活下去，我竟也想长生了？？<br>看了探虚陵，也渐渐懂了一些感情，有时人物的心境和我不谋而合，我就会再确认一遍对你的喜欢。<br>这样反复确认，加深又加深，我对你的感情也深不可测了。<br>你说我和师师有点像，我没看出来，但我倒觉得你和洛神有点像。<br>初认识你时，你给我的感觉也是那样清清冷冷，生分得很，我也因为这样怪了你一阵子。<br>熟识了呢，你变得会撒娇，会生气，会掉眼泪，还喜欢对我笑，刚认识的时候你可没怎么对我笑过呢！！冷淡的很。<br>每次你一笑啊，我也特别开心，我特别喜欢你开心的样子，忍不住会多看几眼。</p>\n<p>其实我也不知道你长得到底好不好看，以前没怎么看你，也不关注你的外貌，现在大概是情人眼里出西施，也不能作数的。<br>在一起久了，我就喜欢看你，怎么看怎么可爱，怎么看怎么好看，在睡觉的时候我可是偷偷摸过好几次你脸的轮廓呢嘻嘻嘻（嘘~）<br>尤其喜欢你的鼻子，鼻尖微微上翘，带着几丝俏皮，有一种小巧玲珑很秀气的感觉。<br>喜欢你板正的身板，特别正经，正经中带着一点可爱。<br>对了，你的颈椎不好，不管研究生任务多繁重，一段时间也要起来活动活动，花不了多少时间的。<br>身体最重要，就算不能长生，也要活到一百岁哦，这样就能说，我们的爱跨越了一个世纪了~<br>老是说你胖，但是你嘴上说着减肥，却管不住吃哈哈哈。<br>其实还好啦，这样刚刚好，特别喜欢用我的脸贴着你的脸揉，像棉花糖，软软的很舒服。</p>\n<p>去广州记得写信哦，不要嫌字丑，我喜欢你的字，比我的字好看多了~<br>你呀，和我在一起还有偶像包袱，连睡觉都要整理刘海，总有一天我要把你那刘海掀起来~诶嘿嘿<br>去新宿舍要和室友好好相处哦，这点我不担心，你总有一种魔力让人不由自主喜欢你，可能我就是这样陷进去的吧///.////<br>但是也不能太亲密哦！不许和室友撒娇，物理距离不许太近，不然我会生气的！<br>你给你表妹发个朋友圈，你不知道我有多嫉妒呢，<br>不过是家人就算咯，朋友可不许！<br>哎呀不行，一想到这些，我就没信心，<br>不要太放肆，你可是我的。</p>\n<p>好好照顾自己，我也会好好照顾我自己，你不用太操心。<br>我现在厨艺比以前好多了，以前不喜欢做菜，像是在做任务，<br>现在会慢慢研究一些菜谱，也越来越有耐心了。<br>每次我心情一有点低落，我就会想起你和我说的要往前看，然后去找点事情做，让生活变得充实。<br>生活一切都好，除了不可抑制的想你。<br>你说叫你亲爱的，我却好想一直叫你的名字呢，想在你耳边，一直叫你的名字。<br>我爱你，我确定。</p>\n<p>刚分开就在想你，连和你在一起，也觉得不够，总想和你更亲近，真的好想变小被你放在口袋里！<br>期待着我们下一次见面的日子，我发现啊，我越来越离不开你了。<br>(肯定是你的阴谋！哼哼)<br>有时会幻想我们以后一起生活的样子，或者我们再次见面我飞扑像你的样子，<br>或者你被我惹得娇喘连连的样子【误<br>好想快点开始属于我们俩的余生~<br>一想到这些，我就对生活充满感激，感谢让我遇到你。<br>我什么也不怕，和你在一起，是我最正确的决定。<br>今生，愿一直相伴在你左右。<br>不行，还是生生世世吧，下辈子下下辈子你也不许去撩别人！！</p>\n<p>好啦。<br>硕士研究生马蒙蒙，做好准备，迎接你全新的美好生活哦~<br>爱你的，林雪。</p>\n<p>2018年6月8日</p>\n"},{"title":"k-近邻算法小结笔记","author":"Meredith Ma","date":"2018-07-23T04:45:00.000Z","_content":"优点：精度高、对异常值不敏感、无数据输入假定\t\n缺点：计算复杂度高、空间复杂度高\t\n适用数据范围：数值型和标称型\t\n一般流程\n-----\n(1)收集数据：可使用任何方法\t\n(2)准备数据：距离计算所需要的数值，最好是结构化的数据格式\t\n(3)分析数据：可以使用任何方法\t\n(4)训练算法：此步骤不适用与k-近邻算法\t\n(5)测试算法：计算错误率\t\n(6)使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据据分别属于哪个分类，最后应用对于计算出的分类执行后续的处理\t\n算法伪代码\n---\n对未知类别属性的数据集中的每个点一次执行以下操作：\t\n(1)计算已知类别数据集中的点与当前点之间的距离\t\n(2)按照距离递增次序排序\t\n(3)选取与当前距离最小的k个点\t\n(4)确定前k个点所在类别的出现频率\t\n(5)返回前k个点出现频率最高的类别作为当前点的预测分类\t\nPython实现程序\n---\n```python\ndef classify0(inX, dataSet, labels, k):\n\tdataSetSize = dataSet.shape[0]\t\n\tdiffMat = tile(inX, (dataSetSize, 1)) - dataSet\t\n\tsqDiffMat = diffMat ** 2\t\n\tsqDistances = sqDiffMat.sum(axis=1)\t\n\tdistances = sqDistances ** 0.5\t\n\tsortedDistIndices = distances.argsort()\t\n\tclassCount = {}\t\n\tfor i in range(k):\t\n\t\tvoteIlabel = labels[sortedDistIndices[i]]\t\n\t\tclassCount[voteIlabel] = classCount.get(voteIlabel,0) + 1\t\n\tsortedClassCount = sorted(classCount.iteritems(),\t\n\tkey=operator.itemgetter(1), reverse=True)\t\n\treturn sortedClassCount[0][0]\n\n```","source":"_posts/k-近邻算法小结笔记.md","raw":"title: k-近邻算法小结笔记\nauthor: Meredith Ma\ntags:\n  - 机器学习实战\ncategories:\n  - 机器学习\ndate: 2018-07-23 12:45:00\n---\n优点：精度高、对异常值不敏感、无数据输入假定\t\n缺点：计算复杂度高、空间复杂度高\t\n适用数据范围：数值型和标称型\t\n一般流程\n-----\n(1)收集数据：可使用任何方法\t\n(2)准备数据：距离计算所需要的数值，最好是结构化的数据格式\t\n(3)分析数据：可以使用任何方法\t\n(4)训练算法：此步骤不适用与k-近邻算法\t\n(5)测试算法：计算错误率\t\n(6)使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据据分别属于哪个分类，最后应用对于计算出的分类执行后续的处理\t\n算法伪代码\n---\n对未知类别属性的数据集中的每个点一次执行以下操作：\t\n(1)计算已知类别数据集中的点与当前点之间的距离\t\n(2)按照距离递增次序排序\t\n(3)选取与当前距离最小的k个点\t\n(4)确定前k个点所在类别的出现频率\t\n(5)返回前k个点出现频率最高的类别作为当前点的预测分类\t\nPython实现程序\n---\n```python\ndef classify0(inX, dataSet, labels, k):\n\tdataSetSize = dataSet.shape[0]\t\n\tdiffMat = tile(inX, (dataSetSize, 1)) - dataSet\t\n\tsqDiffMat = diffMat ** 2\t\n\tsqDistances = sqDiffMat.sum(axis=1)\t\n\tdistances = sqDistances ** 0.5\t\n\tsortedDistIndices = distances.argsort()\t\n\tclassCount = {}\t\n\tfor i in range(k):\t\n\t\tvoteIlabel = labels[sortedDistIndices[i]]\t\n\t\tclassCount[voteIlabel] = classCount.get(voteIlabel,0) + 1\t\n\tsortedClassCount = sorted(classCount.iteritems(),\t\n\tkey=operator.itemgetter(1), reverse=True)\t\n\treturn sortedClassCount[0][0]\n\n```","slug":"k-近邻算法小结笔记","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv53000hb9oufd6blpww","content":"<p>优点：精度高、对异常值不敏感、无数据输入假定<br>缺点：计算复杂度高、空间复杂度高<br>适用数据范围：数值型和标称型    </p>\n<h2 id=\"一般流程\"><a href=\"#一般流程\" class=\"headerlink\" title=\"一般流程\"></a>一般流程</h2><p>(1)收集数据：可使用任何方法<br>(2)准备数据：距离计算所需要的数值，最好是结构化的数据格式<br>(3)分析数据：可以使用任何方法<br>(4)训练算法：此步骤不适用与k-近邻算法<br>(5)测试算法：计算错误率<br>(6)使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据据分别属于哪个分类，最后应用对于计算出的分类执行后续的处理    </p>\n<h2 id=\"算法伪代码\"><a href=\"#算法伪代码\" class=\"headerlink\" title=\"算法伪代码\"></a>算法伪代码</h2><p>对未知类别属性的数据集中的每个点一次执行以下操作：<br>(1)计算已知类别数据集中的点与当前点之间的距离<br>(2)按照距离递增次序排序<br>(3)选取与当前距离最小的k个点<br>(4)确定前k个点所在类别的出现频率<br>(5)返回前k个点出现频率最高的类别作为当前点的预测分类    </p>\n<h2 id=\"Python实现程序\"><a href=\"#Python实现程序\" class=\"headerlink\" title=\"Python实现程序\"></a>Python实现程序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify0</span><span class=\"params\">(inX, dataSet, labels, k)</span>:</span></span><br><span class=\"line\">\tdataSetSize = dataSet.shape[<span class=\"number\">0</span>]\t</span><br><span class=\"line\">\tdiffMat = tile(inX, (dataSetSize, <span class=\"number\">1</span>)) - dataSet\t</span><br><span class=\"line\">\tsqDiffMat = diffMat ** <span class=\"number\">2</span>\t</span><br><span class=\"line\">\tsqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)\t</span><br><span class=\"line\">\tdistances = sqDistances ** <span class=\"number\">0.5</span>\t</span><br><span class=\"line\">\tsortedDistIndices = distances.argsort()\t</span><br><span class=\"line\">\tclassCount = &#123;&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):\t</span><br><span class=\"line\">\t\tvoteIlabel = labels[sortedDistIndices[i]]\t</span><br><span class=\"line\">\t\tclassCount[voteIlabel] = classCount.get(voteIlabel,<span class=\"number\">0</span>) + <span class=\"number\">1</span>\t</span><br><span class=\"line\">\tsortedClassCount = sorted(classCount.iteritems(),\t</span><br><span class=\"line\">\tkey=operator.itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"keyword\">True</span>)\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>优点：精度高、对异常值不敏感、无数据输入假定<br>缺点：计算复杂度高、空间复杂度高<br>适用数据范围：数值型和标称型    </p>\n<h2 id=\"一般流程\"><a href=\"#一般流程\" class=\"headerlink\" title=\"一般流程\"></a>一般流程</h2><p>(1)收集数据：可使用任何方法<br>(2)准备数据：距离计算所需要的数值，最好是结构化的数据格式<br>(3)分析数据：可以使用任何方法<br>(4)训练算法：此步骤不适用与k-近邻算法<br>(5)测试算法：计算错误率<br>(6)使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-近邻算法判定输入数据据分别属于哪个分类，最后应用对于计算出的分类执行后续的处理    </p>\n<h2 id=\"算法伪代码\"><a href=\"#算法伪代码\" class=\"headerlink\" title=\"算法伪代码\"></a>算法伪代码</h2><p>对未知类别属性的数据集中的每个点一次执行以下操作：<br>(1)计算已知类别数据集中的点与当前点之间的距离<br>(2)按照距离递增次序排序<br>(3)选取与当前距离最小的k个点<br>(4)确定前k个点所在类别的出现频率<br>(5)返回前k个点出现频率最高的类别作为当前点的预测分类    </p>\n<h2 id=\"Python实现程序\"><a href=\"#Python实现程序\" class=\"headerlink\" title=\"Python实现程序\"></a>Python实现程序</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">classify0</span><span class=\"params\">(inX, dataSet, labels, k)</span>:</span></span><br><span class=\"line\">\tdataSetSize = dataSet.shape[<span class=\"number\">0</span>]\t</span><br><span class=\"line\">\tdiffMat = tile(inX, (dataSetSize, <span class=\"number\">1</span>)) - dataSet\t</span><br><span class=\"line\">\tsqDiffMat = diffMat ** <span class=\"number\">2</span>\t</span><br><span class=\"line\">\tsqDistances = sqDiffMat.sum(axis=<span class=\"number\">1</span>)\t</span><br><span class=\"line\">\tdistances = sqDistances ** <span class=\"number\">0.5</span>\t</span><br><span class=\"line\">\tsortedDistIndices = distances.argsort()\t</span><br><span class=\"line\">\tclassCount = &#123;&#125;\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(k):\t</span><br><span class=\"line\">\t\tvoteIlabel = labels[sortedDistIndices[i]]\t</span><br><span class=\"line\">\t\tclassCount[voteIlabel] = classCount.get(voteIlabel,<span class=\"number\">0</span>) + <span class=\"number\">1</span>\t</span><br><span class=\"line\">\tsortedClassCount = sorted(classCount.iteritems(),\t</span><br><span class=\"line\">\tkey=operator.itemgetter(<span class=\"number\">1</span>), reverse=<span class=\"keyword\">True</span>)\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sortedClassCount[<span class=\"number\">0</span>][<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>"},{"title":"__type_traits是什么？","author":"Meredith Ma","date":"2019-11-11T13:54:46.000Z","_content":"value_type(const iterator&)萃取迭代器的value type\n```C++\ntemplate &lt;class iterator=\"\"&gt;\ninline typename iterator_traits&lt;iterator&gt;::value_type*\nvalue_type(const Iterator&) {\n    return static_cast&lt;typename iterator_traits=\"\"&gt;::value_type*&gt;(0);\n}\n```\n__type_traits是为了萃取类型(type)的特性，其中我们主要关注的是这个类型是否具备non-trivial(有意义) default/copy/assignment ctor or dtor，如果答案是否定的，即没有有意义的构造析构函数时，我们就可以使用更有效率的措施，采用内存方式(malloc, memcpy等)直接处理即可。\n\n为了判断5个条件，内部需要定义一些typedefs，其值只能是__true_type or __false_type\n```C++\ntemplate &lt;class type=\"\"&gt;\nstruct __type_traits {\n    typedef __false_type has_trivial_default_constructor;\n    typedef __false_type has_trivial_copy_constructor;\n    typedef __false_type has_trivial_assignment_constructor;\n    typedef __false_type has_trivial_destructor;\n    typedef __false_type is_POD_type;\n};\n```\n\n即先对其定义为构造析构有意义的类型，之后对标量类型设计特化版本如：\n```C++\ntemplate &lt;class t=\"\"&gt;\nstruct __type_traits&lt;t*&gt; {\n    typedef __true_type has_trivial_default_constructor;\n    typedef __true_type has_trivial_copy_constructor;\n    typedef __true_type has_trivial_assignment_constructor;\n    typedef __true_type has_trivial_destructor;\n    typedef __true_type is_POD_type;\n};\n```","source":"_posts/type-traits是什么？.md","raw":"title: __type_traits是什么？\nauthor: Meredith Ma\ndate: 2019-11-11 21:54:46\ntags:\n---\nvalue_type(const iterator&)萃取迭代器的value type\n```C++\ntemplate &lt;class iterator=\"\"&gt;\ninline typename iterator_traits&lt;iterator&gt;::value_type*\nvalue_type(const Iterator&) {\n    return static_cast&lt;typename iterator_traits=\"\"&gt;::value_type*&gt;(0);\n}\n```\n__type_traits是为了萃取类型(type)的特性，其中我们主要关注的是这个类型是否具备non-trivial(有意义) default/copy/assignment ctor or dtor，如果答案是否定的，即没有有意义的构造析构函数时，我们就可以使用更有效率的措施，采用内存方式(malloc, memcpy等)直接处理即可。\n\n为了判断5个条件，内部需要定义一些typedefs，其值只能是__true_type or __false_type\n```C++\ntemplate &lt;class type=\"\"&gt;\nstruct __type_traits {\n    typedef __false_type has_trivial_default_constructor;\n    typedef __false_type has_trivial_copy_constructor;\n    typedef __false_type has_trivial_assignment_constructor;\n    typedef __false_type has_trivial_destructor;\n    typedef __false_type is_POD_type;\n};\n```\n\n即先对其定义为构造析构有意义的类型，之后对标量类型设计特化版本如：\n```C++\ntemplate &lt;class t=\"\"&gt;\nstruct __type_traits&lt;t*&gt; {\n    typedef __true_type has_trivial_default_constructor;\n    typedef __true_type has_trivial_copy_constructor;\n    typedef __true_type has_trivial_assignment_constructor;\n    typedef __true_type has_trivial_destructor;\n    typedef __true_type is_POD_type;\n};\n```","slug":"type-traits是什么？","published":1,"updated":"2019-11-11T13:54:46.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv54000kb9ou0bv27bwp","content":"<p>value_type(const iterator&amp;)萃取迭代器的value type<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iterator</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">typename</span> iterator_traits&amp;lt;iterator&amp;gt;::value_type*</span><br><span class=\"line\">value_type(<span class=\"keyword\">const</span> Iterator&amp;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&amp;lt;<span class=\"keyword\">typename</span> iterator_traits=<span class=\"string\">\"\"</span>&amp;gt;::value_type*&amp;gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>__type_traits是为了萃取类型(type)的特性，其中我们主要关注的是这个类型是否具备non-trivial(有意义) default/copy/assignment ctor or dtor，如果答案是否定的，即没有有意义的构造析构函数时，我们就可以使用更有效率的措施，采用内存方式(malloc, memcpy等)直接处理即可。</p>\n<p>为了判断5个条件，内部需要定义一些typedefs，其值只能是<strong>true_type or </strong>false_type<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">type</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">type_traits</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_default_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_copy_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_assignment_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_destructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type is_POD_type;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>即先对其定义为构造析构有意义的类型，之后对标量类型设计特化版本如：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">type_traits</span>&amp;<span class=\"title\">lt</span>;</span>t*&amp;gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_copy_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_assignment_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_destructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type is_POD_type;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>value_type(const iterator&amp;)萃取迭代器的value type<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">iterator</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">typename</span> iterator_traits&amp;lt;iterator&amp;gt;::value_type*</span><br><span class=\"line\">value_type(<span class=\"keyword\">const</span> Iterator&amp;) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">static_cast</span>&amp;lt;<span class=\"keyword\">typename</span> iterator_traits=<span class=\"string\">\"\"</span>&amp;gt;::value_type*&amp;gt;(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>__type_traits是为了萃取类型(type)的特性，其中我们主要关注的是这个类型是否具备non-trivial(有意义) default/copy/assignment ctor or dtor，如果答案是否定的，即没有有意义的构造析构函数时，我们就可以使用更有效率的措施，采用内存方式(malloc, memcpy等)直接处理即可。</p>\n<p>为了判断5个条件，内部需要定义一些typedefs，其值只能是<strong>true_type or </strong>false_type<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">type</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">type_traits</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_default_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_copy_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_assignment_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type has_trivial_destructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __false_type is_POD_type;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>即先对其定义为构造析构有意义的类型，之后对标量类型设计特化版本如：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &amp;lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">t</span>=\"\"&amp;<span class=\"title\">gt</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> __<span class=\"title\">type_traits</span>&amp;<span class=\"title\">lt</span>;</span>t*&amp;gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_copy_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_assignment_constructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type has_trivial_destructor;</span><br><span class=\"line\">    <span class=\"keyword\">typedef</span> __true_type is_POD_type;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"【win10】端口已被占用","author":"Meredith Ma","date":"2018-07-20T10:50:00.000Z","update":"2018-07-19T16:00:00.000Z","_content":"这种情况只需要利用cmd命令行查出哪个进程异常占用了端口，终止此程序即可\n\n### 1.查询是哪个进程（PID）占用了端口\t\n\n>netstat -ano | findstr port\t\n\nport替换为被占用的端口号\n\n![upload successful](\\\\images\\pasted-0.png\\)\t\n\n假设端口号为4000，返回结果的最右侧一串数字（8684）即为PID\t\n\n### 2.使用PID查询是哪个程序占用了端口\t\n\n>tasklist | findstr 8684\n\n### 3.终止占用端口的程序\t\n\n打开任务管理器，详细信息选项卡中可以看到PID对应的程序，终止此程序即可解决本端口被占用的问题","source":"_posts/win10系统下端口占用.md","raw":"title: 【win10】端口已被占用\nauthor: Meredith Ma\ntags:\n  - 操作系统\n  - win10\n  - 端口\ncategories:\n  - 操作系统\ndate: 2018-07-20 18:50:00\nupdate: 2018-07-20 00:00:00\n---\n这种情况只需要利用cmd命令行查出哪个进程异常占用了端口，终止此程序即可\n\n### 1.查询是哪个进程（PID）占用了端口\t\n\n>netstat -ano | findstr port\t\n\nport替换为被占用的端口号\n\n![upload successful](\\\\images\\pasted-0.png\\)\t\n\n假设端口号为4000，返回结果的最右侧一串数字（8684）即为PID\t\n\n### 2.使用PID查询是哪个程序占用了端口\t\n\n>tasklist | findstr 8684\n\n### 3.终止占用端口的程序\t\n\n打开任务管理器，详细信息选项卡中可以看到PID对应的程序，终止此程序即可解决本端口被占用的问题","slug":"win10系统下端口占用","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv56000lb9oue25v5svo","content":"<p>这种情况只需要利用cmd命令行查出哪个进程异常占用了端口，终止此程序即可</p>\n<h3 id=\"1-查询是哪个进程（PID）占用了端口\"><a href=\"#1-查询是哪个进程（PID）占用了端口\" class=\"headerlink\" title=\"1.查询是哪个进程（PID）占用了端口\"></a>1.查询是哪个进程（PID）占用了端口</h3><blockquote>\n<p>netstat -ano | findstr port    </p>\n</blockquote>\n<p>port替换为被占用的端口号</p>\n<p><img src=\"\\\\images\\pasted-0.png\\\" alt=\"upload successful\">    </p>\n<p>假设端口号为4000，返回结果的最右侧一串数字（8684）即为PID    </p>\n<h3 id=\"2-使用PID查询是哪个程序占用了端口\"><a href=\"#2-使用PID查询是哪个程序占用了端口\" class=\"headerlink\" title=\"2.使用PID查询是哪个程序占用了端口\"></a>2.使用PID查询是哪个程序占用了端口</h3><blockquote>\n<p>tasklist | findstr 8684</p>\n</blockquote>\n<h3 id=\"3-终止占用端口的程序\"><a href=\"#3-终止占用端口的程序\" class=\"headerlink\" title=\"3.终止占用端口的程序\"></a>3.终止占用端口的程序</h3><p>打开任务管理器，详细信息选项卡中可以看到PID对应的程序，终止此程序即可解决本端口被占用的问题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这种情况只需要利用cmd命令行查出哪个进程异常占用了端口，终止此程序即可</p>\n<h3 id=\"1-查询是哪个进程（PID）占用了端口\"><a href=\"#1-查询是哪个进程（PID）占用了端口\" class=\"headerlink\" title=\"1.查询是哪个进程（PID）占用了端口\"></a>1.查询是哪个进程（PID）占用了端口</h3><blockquote>\n<p>netstat -ano | findstr port    </p>\n</blockquote>\n<p>port替换为被占用的端口号</p>\n<p><img src=\"\\\\images\\pasted-0.png\\\" alt=\"upload successful\">    </p>\n<p>假设端口号为4000，返回结果的最右侧一串数字（8684）即为PID    </p>\n<h3 id=\"2-使用PID查询是哪个程序占用了端口\"><a href=\"#2-使用PID查询是哪个程序占用了端口\" class=\"headerlink\" title=\"2.使用PID查询是哪个程序占用了端口\"></a>2.使用PID查询是哪个程序占用了端口</h3><blockquote>\n<p>tasklist | findstr 8684</p>\n</blockquote>\n<h3 id=\"3-终止占用端口的程序\"><a href=\"#3-终止占用端口的程序\" class=\"headerlink\" title=\"3.终止占用端口的程序\"></a>3.终止占用端口的程序</h3><p>打开任务管理器，详细信息选项卡中可以看到PID对应的程序，终止此程序即可解决本端口被占用的问题</p>\n"},{"title":"从零构建一个问答系统","author":"Meredith Ma","date":"2019-03-03T03:36:20.000Z","_content":"经过一段时间的找实习经历，准备开始学习nlp相关，为此需要找一个方向来进行，遂决定把实现一个问答系统为目标进行相关nlp的学习，目的也是为了暑期实习。\n首先是这个问答系统实现到什么样的程度以及定位：\n1、特定领域相关（金融）\n2、采用机器学习及神经网络进行训练\n需要什么方面的知识：\n1、数据集进行分词以及word2vec词向量处理\n2、。。。","source":"_posts/从零构建一个问答系统.md","raw":"title: 从零构建一个问答系统\nauthor: Meredith Ma\ndate: 2019-03-03 11:36:20\ntags:\n---\n经过一段时间的找实习经历，准备开始学习nlp相关，为此需要找一个方向来进行，遂决定把实现一个问答系统为目标进行相关nlp的学习，目的也是为了暑期实习。\n首先是这个问答系统实现到什么样的程度以及定位：\n1、特定领域相关（金融）\n2、采用机器学习及神经网络进行训练\n需要什么方面的知识：\n1、数据集进行分词以及word2vec词向量处理\n2、。。。","slug":"从零构建一个问答系统","published":1,"updated":"2019-11-11T13:17:11.675Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv58000pb9oua1a8jesq","content":"<p>经过一段时间的找实习经历，准备开始学习nlp相关，为此需要找一个方向来进行，遂决定把实现一个问答系统为目标进行相关nlp的学习，目的也是为了暑期实习。<br>首先是这个问答系统实现到什么样的程度以及定位：<br>1、特定领域相关（金融）<br>2、采用机器学习及神经网络进行训练<br>需要什么方面的知识：<br>1、数据集进行分词以及word2vec词向量处理<br>2、。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>经过一段时间的找实习经历，准备开始学习nlp相关，为此需要找一个方向来进行，遂决定把实现一个问答系统为目标进行相关nlp的学习，目的也是为了暑期实习。<br>首先是这个问答系统实现到什么样的程度以及定位：<br>1、特定领域相关（金融）<br>2、采用机器学习及神经网络进行训练<br>需要什么方面的知识：<br>1、数据集进行分词以及word2vec词向量处理<br>2、。。。</p>\n"},{"title":"加解密算法","author":"Meredith Ma","date":"2019-11-11T13:56:00.000Z","_content":"### 引子-凯撒密码\n---\n通过将单词表位移几位来进行密码加密  \n例如Java-->lbxb\n### 哈希加密\n---\n严格意义上讲，哈希算法不算是加密算法，他是通过key来对数据进行一个校验验证  \n**客户端**  \nname: mmm  \nstuid: 1821XXXX  \nfee: 100  \n对于这样一个序列，使用一个key来进行  \nHash(name, stuid, fee, key) = valicode  \n**服务端**  \n接收到name，stuid，fee，valicode之后就可以使用key来验证数据是否被更改过  \n故哈希加密并不对明文进行加密，只是保证key未丢失的情况下数据没有被更改过  \n著名的有MD5算法，因为MD5只有128位不够保密就又有之后的SHA算法  \n### 对称加密\n---\n分为序列密码和分组密码两类  \n序列密码将每个字符单独加密再组合成密文  \n分组密码将字符进行分组，每个组进行整体加密  \n为了解决哈希加密未对明文进行加密，出现了对称加密，即客户端和服务端公用一个密钥进行加密解密  \n著名的有DES，3DES和更加安全的AES\n### 非对称加密\n---\n![](https://pic1.zhimg.com/v2-12315b868825014f9f9c11a79f312120_b.jpg)\n使用公钥加密，私钥解密或使用私钥加密，公钥解密。即加解密的密钥不同  \n非对称加密算法目前有三个方案：整数分解、离散对数方案、椭圆曲线方案  \n著名的有RSA算法","source":"_posts/加解密算法.md","raw":"title: 加解密算法\nauthor: Meredith Ma\ntags:\n  - 加密\n  - 哈希\n  - AES\ncategories:\n  - 爬虫\ndate: 2019-11-11 21:56:00\n---\n### 引子-凯撒密码\n---\n通过将单词表位移几位来进行密码加密  \n例如Java-->lbxb\n### 哈希加密\n---\n严格意义上讲，哈希算法不算是加密算法，他是通过key来对数据进行一个校验验证  \n**客户端**  \nname: mmm  \nstuid: 1821XXXX  \nfee: 100  \n对于这样一个序列，使用一个key来进行  \nHash(name, stuid, fee, key) = valicode  \n**服务端**  \n接收到name，stuid，fee，valicode之后就可以使用key来验证数据是否被更改过  \n故哈希加密并不对明文进行加密，只是保证key未丢失的情况下数据没有被更改过  \n著名的有MD5算法，因为MD5只有128位不够保密就又有之后的SHA算法  \n### 对称加密\n---\n分为序列密码和分组密码两类  \n序列密码将每个字符单独加密再组合成密文  \n分组密码将字符进行分组，每个组进行整体加密  \n为了解决哈希加密未对明文进行加密，出现了对称加密，即客户端和服务端公用一个密钥进行加密解密  \n著名的有DES，3DES和更加安全的AES\n### 非对称加密\n---\n![](https://pic1.zhimg.com/v2-12315b868825014f9f9c11a79f312120_b.jpg)\n使用公钥加密，私钥解密或使用私钥加密，公钥解密。即加解密的密钥不同  \n非对称加密算法目前有三个方案：整数分解、离散对数方案、椭圆曲线方案  \n著名的有RSA算法","slug":"加解密算法","published":1,"updated":"2019-11-11T15:46:42.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv5a000rb9ouas2z7ejc","content":"<h3 id=\"引子-凯撒密码\"><a href=\"#引子-凯撒密码\" class=\"headerlink\" title=\"引子-凯撒密码\"></a>引子-凯撒密码</h3><hr>\n<p>通过将单词表位移几位来进行密码加密<br>例如Java–&gt;lbxb</p>\n<h3 id=\"哈希加密\"><a href=\"#哈希加密\" class=\"headerlink\" title=\"哈希加密\"></a>哈希加密</h3><hr>\n<p>严格意义上讲，哈希算法不算是加密算法，他是通过key来对数据进行一个校验验证<br><strong>客户端</strong><br>name: mmm<br>stuid: 1821XXXX<br>fee: 100<br>对于这样一个序列，使用一个key来进行<br>Hash(name, stuid, fee, key) = valicode<br><strong>服务端</strong><br>接收到name，stuid，fee，valicode之后就可以使用key来验证数据是否被更改过<br>故哈希加密并不对明文进行加密，只是保证key未丢失的情况下数据没有被更改过<br>著名的有MD5算法，因为MD5只有128位不够保密就又有之后的SHA算法  </p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><hr>\n<p>分为序列密码和分组密码两类<br>序列密码将每个字符单独加密再组合成密文<br>分组密码将字符进行分组，每个组进行整体加密<br>为了解决哈希加密未对明文进行加密，出现了对称加密，即客户端和服务端公用一个密钥进行加密解密<br>著名的有DES，3DES和更加安全的AES</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><hr>\n<p><img src=\"https://pic1.zhimg.com/v2-12315b868825014f9f9c11a79f312120_b.jpg\" alt=\"\"><br>使用公钥加密，私钥解密或使用私钥加密，公钥解密。即加解密的密钥不同<br>非对称加密算法目前有三个方案：整数分解、离散对数方案、椭圆曲线方案<br>著名的有RSA算法</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引子-凯撒密码\"><a href=\"#引子-凯撒密码\" class=\"headerlink\" title=\"引子-凯撒密码\"></a>引子-凯撒密码</h3><hr>\n<p>通过将单词表位移几位来进行密码加密<br>例如Java–&gt;lbxb</p>\n<h3 id=\"哈希加密\"><a href=\"#哈希加密\" class=\"headerlink\" title=\"哈希加密\"></a>哈希加密</h3><hr>\n<p>严格意义上讲，哈希算法不算是加密算法，他是通过key来对数据进行一个校验验证<br><strong>客户端</strong><br>name: mmm<br>stuid: 1821XXXX<br>fee: 100<br>对于这样一个序列，使用一个key来进行<br>Hash(name, stuid, fee, key) = valicode<br><strong>服务端</strong><br>接收到name，stuid，fee，valicode之后就可以使用key来验证数据是否被更改过<br>故哈希加密并不对明文进行加密，只是保证key未丢失的情况下数据没有被更改过<br>著名的有MD5算法，因为MD5只有128位不够保密就又有之后的SHA算法  </p>\n<h3 id=\"对称加密\"><a href=\"#对称加密\" class=\"headerlink\" title=\"对称加密\"></a>对称加密</h3><hr>\n<p>分为序列密码和分组密码两类<br>序列密码将每个字符单独加密再组合成密文<br>分组密码将字符进行分组，每个组进行整体加密<br>为了解决哈希加密未对明文进行加密，出现了对称加密，即客户端和服务端公用一个密钥进行加密解密<br>著名的有DES，3DES和更加安全的AES</p>\n<h3 id=\"非对称加密\"><a href=\"#非对称加密\" class=\"headerlink\" title=\"非对称加密\"></a>非对称加密</h3><hr>\n<p><img src=\"https://pic1.zhimg.com/v2-12315b868825014f9f9c11a79f312120_b.jpg\" alt=\"\"><br>使用公钥加密，私钥解密或使用私钥加密，公钥解密。即加解密的密钥不同<br>非对称加密算法目前有三个方案：整数分解、离散对数方案、椭圆曲线方案<br>著名的有RSA算法</p>\n"},{"title":"强类型、弱类型语言，静态、动态语言","author":"Meredith Ma","date":"2019-11-11T13:55:08.000Z","_content":"<font size=4 color=red ><strong>program errors</strong></font><br>\n<p>trapped errors： 导致程序终止执行，如除以0，数组访问越界</p>\n<p>untrapped errors： 出错后继续执行，如缓冲区溢出，jump到错误地址</p>\n\n<font size=4 color=red><strong>forbidden behavior</strong></font><br>\n<p>语言设计时，设计一组forbidden behavior，必须包含所有untrapped errors，可以包含部分trapped errors。</p>\n\n<font size=4 color=red bold><strong>well behaved， ill behaved</strong></font><br>\n<p>well behaved： 程序执行不可能出现forbidden behavior，则程序为well bahaved\nill bahaved： 否则为此类型</p>\n\n<font size=4 color=red><strong>强类型语言（strongly typed）和弱类型语言（weakly typed）</strong></font><br>\n<p>强类型语言：语言的任何程序都是well behaved，即不可能出现forbidden behaviors</p>\n\n<p>弱类型语言：否则是此类型</p>\n<font size=4 color=red bold><strong>静态语言（static）和动态语言（dynamic）</strong></font><br>\n\n<p>静态语言：在编译的时候拒绝ill behaviors</p>\n\n<p>动态语言：在运行的时候拒绝ill behaviors</p>","source":"_posts/强类型、弱类型语言，静态、动态语言.md","raw":"title: 强类型、弱类型语言，静态、动态语言\nauthor: Meredith Ma\ndate: 2019-11-11 21:55:08\ntags:\n---\n<font size=4 color=red ><strong>program errors</strong></font><br>\n<p>trapped errors： 导致程序终止执行，如除以0，数组访问越界</p>\n<p>untrapped errors： 出错后继续执行，如缓冲区溢出，jump到错误地址</p>\n\n<font size=4 color=red><strong>forbidden behavior</strong></font><br>\n<p>语言设计时，设计一组forbidden behavior，必须包含所有untrapped errors，可以包含部分trapped errors。</p>\n\n<font size=4 color=red bold><strong>well behaved， ill behaved</strong></font><br>\n<p>well behaved： 程序执行不可能出现forbidden behavior，则程序为well bahaved\nill bahaved： 否则为此类型</p>\n\n<font size=4 color=red><strong>强类型语言（strongly typed）和弱类型语言（weakly typed）</strong></font><br>\n<p>强类型语言：语言的任何程序都是well behaved，即不可能出现forbidden behaviors</p>\n\n<p>弱类型语言：否则是此类型</p>\n<font size=4 color=red bold><strong>静态语言（static）和动态语言（dynamic）</strong></font><br>\n\n<p>静态语言：在编译的时候拒绝ill behaviors</p>\n\n<p>动态语言：在运行的时候拒绝ill behaviors</p>","slug":"强类型、弱类型语言，静态、动态语言","published":1,"updated":"2019-11-11T13:55:09.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv5b000wb9oud5cuwnpc","content":"<p><font size=\"4\" color=\"red\"><strong>program errors</strong></font><br></p>\n<p>trapped errors： 导致程序终止执行，如除以0，数组访问越界</p><br><p>untrapped errors： 出错后继续执行，如缓冲区溢出，jump到错误地址</p>\n\n<p><font size=\"4\" color=\"red\"><strong>forbidden behavior</strong></font><br></p>\n<p>语言设计时，设计一组forbidden behavior，必须包含所有untrapped errors，可以包含部分trapped errors。</p>\n\n<p><font size=\"4\" color=\"red\" bold=\"\"><strong>well behaved， ill behaved</strong></font><br></p>\n<p>well behaved： 程序执行不可能出现forbidden behavior，则程序为well bahaved<br>ill bahaved： 否则为此类型</p>\n\n<p><font size=\"4\" color=\"red\"><strong>强类型语言（strongly typed）和弱类型语言（weakly typed）</strong></font><br></p>\n<p>强类型语言：语言的任何程序都是well behaved，即不可能出现forbidden behaviors</p>\n\n<p>弱类型语言：否则是此类型</p><br><font size=\"4\" color=\"red\" bold=\"\"><strong>静态语言（static）和动态语言（dynamic）</strong></font><br><br><br><p>静态语言：在编译的时候拒绝ill behaviors</p>\n\n<p>动态语言：在运行的时候拒绝ill behaviors</p>","site":{"data":{}},"excerpt":"","more":"<p><font size=\"4\" color=\"red\"><strong>program errors</strong></font><br></p>\n<p>trapped errors： 导致程序终止执行，如除以0，数组访问越界</p><br><p>untrapped errors： 出错后继续执行，如缓冲区溢出，jump到错误地址</p>\n\n<p><font size=\"4\" color=\"red\"><strong>forbidden behavior</strong></font><br></p>\n<p>语言设计时，设计一组forbidden behavior，必须包含所有untrapped errors，可以包含部分trapped errors。</p>\n\n<p><font size=\"4\" color=\"red\" bold=\"\"><strong>well behaved， ill behaved</strong></font><br></p>\n<p>well behaved： 程序执行不可能出现forbidden behavior，则程序为well bahaved<br>ill bahaved： 否则为此类型</p>\n\n<p><font size=\"4\" color=\"red\"><strong>强类型语言（strongly typed）和弱类型语言（weakly typed）</strong></font><br></p>\n<p>强类型语言：语言的任何程序都是well behaved，即不可能出现forbidden behaviors</p>\n\n<p>弱类型语言：否则是此类型</p><br><font size=\"4\" color=\"red\" bold=\"\"><strong>静态语言（static）和动态语言（dynamic）</strong></font><br><br><br><p>静态语言：在编译的时候拒绝ill behaviors</p>\n\n<p>动态语言：在运行的时候拒绝ill behaviors</p>"},{"title":"泛型编程(generic programming)与模板(template)编程","author":"Meredith Ma","date":"2019-11-11T13:57:00.000Z","_content":"### 泛型编程Generic Programming泛型编程Generic Programming\n##### GP：将datas与methods分开放\n```C++\n//Data structures\ntemplate<class T, class Alloc=alloc>\nclass vector{...};\ntemplate<class T, class Alloc=alloc, size_t=0>\nclass deque{...};\n//Algorithm\ntemplate<typename _RandomAccessIterator>\ninline void\nsort(_RandomAccessIterator __first,\n\t_RandomAccessIterator __last)\n{...}\ntemplate<typename _RandomAccessIterator>\ninline void\nsort(_RandomAccessIterator __first,\n\t_RandomAccessIterator __last,\n\t_Compare __comp)\n{...}\n```\n##### OOP：将datas与methods放在一起\n```c++\ntemplate<class T, class Alloc=alloc>\nclass list\n{\n...\nvoid sort();\n}\n```\n\n##### 为什么list不可以用::sort()？\n::sort()需要对象是random access container，list不符合。\n\n### 模板Template\nC++中template主要分为三类，类模板(class template)、函数模板(function template)、成员模板(member template)。\n##### 类模板\n保留class或struct的成员数据类别，使用的时候显示告诉template\n类模板分为泛化和特化，特化又分为全特化和偏特化\n偏特化又分为参数个数的偏特化和范围的特化\n```c++\n//泛化\ntemplate<class T>\nclass __type_traits{\n\ttypedef __false_type has_trivial_default_constructor;\n\t...\n}\n//特化\ntemplate<>\nclass __type_traits<int>{\n\ttypedef __true_type has_trivial_default_constructor;\n\t...\n}\n//参数个数偏特化\ntemplate<class T, class Alloc=alloc>\nclass vector{}\ntemplate<class Alloc>\nclass vector<bool, Alloc>\n//参数范围偏特化\ntemplate<class Iterator>\nstruct iterator_traits{...}\ntemplate<class T>\nstruct iterator_traits<T*>{}\ntemplate<class T>\nstruct iterator_traits<const T*>{}\n```\n##### 函数模板\n```c++\ntemplate <class T>\ninline\nconst T& min(const T& a, const T&)\n{\n\treturn a < b ? a : b; //T类去决定T之间是如何比较的，即去重载operator<()\n}\n\nstone r1(2,3), r2(3,3), r3;\nr3 = min(r1, r2);\n\nclass stone\n{\npublic:\n\tbool operator<(const stone& rhs) const{\n\t\treturn _weight < rhs.weight;\n\t}\nprivate:\n\tint weight, _w, _h;\n}\n```\n##### 成员模板\n本文暂时不表","source":"_posts/泛型编程-generic-programming-与模板-template-编程.md","raw":"title: 泛型编程(generic programming)与模板(template)编程\nauthor: Meredith Ma\ntags:\n  - C++\ncategories:\n  - C++\ndate: 2019-11-11 21:57:00\n---\n### 泛型编程Generic Programming泛型编程Generic Programming\n##### GP：将datas与methods分开放\n```C++\n//Data structures\ntemplate<class T, class Alloc=alloc>\nclass vector{...};\ntemplate<class T, class Alloc=alloc, size_t=0>\nclass deque{...};\n//Algorithm\ntemplate<typename _RandomAccessIterator>\ninline void\nsort(_RandomAccessIterator __first,\n\t_RandomAccessIterator __last)\n{...}\ntemplate<typename _RandomAccessIterator>\ninline void\nsort(_RandomAccessIterator __first,\n\t_RandomAccessIterator __last,\n\t_Compare __comp)\n{...}\n```\n##### OOP：将datas与methods放在一起\n```c++\ntemplate<class T, class Alloc=alloc>\nclass list\n{\n...\nvoid sort();\n}\n```\n\n##### 为什么list不可以用::sort()？\n::sort()需要对象是random access container，list不符合。\n\n### 模板Template\nC++中template主要分为三类，类模板(class template)、函数模板(function template)、成员模板(member template)。\n##### 类模板\n保留class或struct的成员数据类别，使用的时候显示告诉template\n类模板分为泛化和特化，特化又分为全特化和偏特化\n偏特化又分为参数个数的偏特化和范围的特化\n```c++\n//泛化\ntemplate<class T>\nclass __type_traits{\n\ttypedef __false_type has_trivial_default_constructor;\n\t...\n}\n//特化\ntemplate<>\nclass __type_traits<int>{\n\ttypedef __true_type has_trivial_default_constructor;\n\t...\n}\n//参数个数偏特化\ntemplate<class T, class Alloc=alloc>\nclass vector{}\ntemplate<class Alloc>\nclass vector<bool, Alloc>\n//参数范围偏特化\ntemplate<class Iterator>\nstruct iterator_traits{...}\ntemplate<class T>\nstruct iterator_traits<T*>{}\ntemplate<class T>\nstruct iterator_traits<const T*>{}\n```\n##### 函数模板\n```c++\ntemplate <class T>\ninline\nconst T& min(const T& a, const T&)\n{\n\treturn a < b ? a : b; //T类去决定T之间是如何比较的，即去重载operator<()\n}\n\nstone r1(2,3), r2(3,3), r3;\nr3 = min(r1, r2);\n\nclass stone\n{\npublic:\n\tbool operator<(const stone& rhs) const{\n\t\treturn _weight < rhs.weight;\n\t}\nprivate:\n\tint weight, _w, _h;\n}\n```\n##### 成员模板\n本文暂时不表","slug":"泛型编程-generic-programming-与模板-template-编程","published":1,"updated":"2019-11-11T15:45:48.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv5d000xb9ou5oajo69k","content":"<h3 id=\"泛型编程Generic-Programming泛型编程Generic-Programming\"><a href=\"#泛型编程Generic-Programming泛型编程Generic-Programming\" class=\"headerlink\" title=\"泛型编程Generic Programming泛型编程Generic Programming\"></a>泛型编程Generic Programming泛型编程Generic Programming</h3><h5 id=\"GP：将datas与methods分开放\"><a href=\"#GP：将datas与methods分开放\" class=\"headerlink\" title=\"GP：将datas与methods分开放\"></a>GP：将datas与methods分开放</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Data structures</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&#123;</span>...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>, <span class=\"title\">size_t</span>=0&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">deque</span>&#123;</span>...&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Algorithm</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _RandomAccessIterator&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">sort(_RandomAccessIterator __first,</span><br><span class=\"line\">\t_RandomAccessIterator __last)</span><br><span class=\"line\">&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _RandomAccessIterator&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">sort(_RandomAccessIterator __first,</span><br><span class=\"line\">\t_RandomAccessIterator __last,</span><br><span class=\"line\">\t_Compare __comp)</span><br><span class=\"line\">&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"OOP：将datas与methods放在一起\"><a href=\"#OOP：将datas与methods放在一起\" class=\"headerlink\" title=\"OOP：将datas与methods放在一起\"></a>OOP：将datas与methods放在一起</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">list</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"为什么list不可以用-sort-？\"><a href=\"#为什么list不可以用-sort-？\" class=\"headerlink\" title=\"为什么list不可以用::sort()？\"></a>为什么list不可以用::sort()？</h5><p>::sort()需要对象是random access container，list不符合。</p>\n<h3 id=\"模板Template\"><a href=\"#模板Template\" class=\"headerlink\" title=\"模板Template\"></a>模板Template</h3><p>C++中template主要分为三类，类模板(class template)、函数模板(function template)、成员模板(member template)。</p>\n<h5 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h5><p>保留class或struct的成员数据类别，使用的时候显示告诉template<br>类模板分为泛化和特化，特化又分为全特化和偏特化<br>偏特化又分为参数个数的偏特化和范围的特化<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> __<span class=\"title\">type_traits</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __false_type has_trivial_default_constructor;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> __<span class=\"title\">type_traits</span>&lt;int&gt;&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数个数偏特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&#123;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&lt;bool, Alloc&gt;</span></span><br><span class=\"line\"><span class=\"class\">//参数范围偏特化</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">template</span>&lt;class Iterator&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&#123;</span>...&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;T*&gt;&#123;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;const T*&gt;&#123;</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">inline</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">min</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">a</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp;)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b ? a : b; <span class=\"comment\">//T类去决定T之间是如何比较的，即去重载operator&lt;()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stone r1(2,3), r2(3,3), r3;</span><br><span class=\"line\">r3 = min(r1, r2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">stone</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> stone&amp; rhs) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _weight &lt; rhs.weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight, _w, _h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"成员模板\"><a href=\"#成员模板\" class=\"headerlink\" title=\"成员模板\"></a>成员模板</h5><p>本文暂时不表</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"泛型编程Generic-Programming泛型编程Generic-Programming\"><a href=\"#泛型编程Generic-Programming泛型编程Generic-Programming\" class=\"headerlink\" title=\"泛型编程Generic Programming泛型编程Generic Programming\"></a>泛型编程Generic Programming泛型编程Generic Programming</h3><h5 id=\"GP：将datas与methods分开放\"><a href=\"#GP：将datas与methods分开放\" class=\"headerlink\" title=\"GP：将datas与methods分开放\"></a>GP：将datas与methods分开放</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Data structures</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&#123;</span>...&#125;;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>, <span class=\"title\">size_t</span>=0&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">deque</span>&#123;</span>...&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Algorithm</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _RandomAccessIterator&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">sort(_RandomAccessIterator __first,</span><br><span class=\"line\">\t_RandomAccessIterator __last)</span><br><span class=\"line\">&#123;...&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> _RandomAccessIterator&gt;</span><br><span class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">sort(_RandomAccessIterator __first,</span><br><span class=\"line\">\t_RandomAccessIterator __last,</span><br><span class=\"line\">\t_Compare __comp)</span><br><span class=\"line\">&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"OOP：将datas与methods放在一起\"><a href=\"#OOP：将datas与methods放在一起\" class=\"headerlink\" title=\"OOP：将datas与methods放在一起\"></a>OOP：将datas与methods放在一起</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">list</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"为什么list不可以用-sort-？\"><a href=\"#为什么list不可以用-sort-？\" class=\"headerlink\" title=\"为什么list不可以用::sort()？\"></a>为什么list不可以用::sort()？</h5><p>::sort()需要对象是random access container，list不符合。</p>\n<h3 id=\"模板Template\"><a href=\"#模板Template\" class=\"headerlink\" title=\"模板Template\"></a>模板Template</h3><p>C++中template主要分为三类，类模板(class template)、函数模板(function template)、成员模板(member template)。</p>\n<h5 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h5><p>保留class或struct的成员数据类别，使用的时候显示告诉template<br>类模板分为泛化和特化，特化又分为全特化和偏特化<br>偏特化又分为参数个数的偏特化和范围的特化<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//泛化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> __<span class=\"title\">type_traits</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __false_type has_trivial_default_constructor;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;&gt;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> __<span class=\"title\">type_traits</span>&lt;int&gt;&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">typedef</span> __true_type has_trivial_default_constructor;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//参数个数偏特化</span></span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>, <span class=\"title\">class</span> <span class=\"title\">Alloc</span>=<span class=\"title\">alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&#123;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Alloc</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">class</span> <span class=\"title\">vector</span>&lt;bool, Alloc&gt;</span></span><br><span class=\"line\"><span class=\"class\">//参数范围偏特化</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">template</span>&lt;class Iterator&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&#123;</span>...&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;T*&gt;&#123;</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">struct</span> <span class=\"title\">iterator_traits</span>&lt;const T*&gt;&#123;</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"函数模板\"><a href=\"#函数模板\" class=\"headerlink\" title=\"函数模板\"></a>函数模板</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">T</span>&gt;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">inline</span></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">min</span>(<span class=\"title\">const</span> <span class=\"title\">T</span>&amp; <span class=\"title\">a</span>, <span class=\"title\">const</span> <span class=\"title\">T</span>&amp;)</span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b ? a : b; <span class=\"comment\">//T类去决定T之间是如何比较的，即去重载operator&lt;()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">stone r1(2,3), r2(3,3), r3;</span><br><span class=\"line\">r3 = min(r1, r2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">stone</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> stone&amp; rhs) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _weight &lt; rhs.weight;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> weight, _w, _h;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"成员模板\"><a href=\"#成员模板\" class=\"headerlink\" title=\"成员模板\"></a>成员模板</h5><p>本文暂时不表</p>\n"},{"title":"线程池中如何确定使用的线程数","author":"Meredith Ma","date":"2019-11-11T13:57:00.000Z","_content":"### 线程池中线程的数目是跟线程池所要处理的任务性质有关的\n\n- 任务的性质：CPU密集型任务、IO密集型任务、混合型任务。\n- 任务的优先级：高、中、低。\n- 任务的执行时间：长、中、短。\n- 任务的依赖性：是否依赖其他系统资源，如数据库连接等。\n\n### 性质不同的任务可以交给不同规模的线程池执行。\n- 针对不同的任务性质而言：CPU密集型任务应配置尽可能小的线程，如配置CPU个数+1的线程数，IO密集型任务应配置尽可能多的线程，因为IO操作不占用CPU，不要让CPU闲下来，应加大线程数量，如配置两倍CPU个数+1，而对于混合型的任务，如果可以拆分，拆分成IO密集型和CPU密集型分别处理，前提是两者运行的时间是差不多的，如果处理时间相差很大，则没必要拆分了。\n- 任务对其他系统资源有依赖：如某个任务依赖数据库的连接返回的结果，这时候等待的时间越长，则CPU空闲的时间越长，那么线程数量应设置得越大，才能更好的利用CPU。 \n- 线程等待时间所占比例越高，这样的话CPU空闲时间比较多，为了能够更好的利用CPU，需要较多线程。\n- 如果线程CPU时间所占比例越高，说明CPU比较繁忙，此时需要越少线程。 \n- 另外，如果线程数量过多，线程之间的切换也会带来开销。\n\n\n### 是否使用线程池就一定比使用单线程高效呢？\n- 答案是否定的，比如Redis就是单线程的，但它却非常高效，基本操作都能达到十万量级/s。从线程这个角度来看，部分原因在于：多线程带来线程上下文切换开销，单线程就没有这种开销。\n\n<br/>[1][线程池中如何确定线程的数目](https://blog.csdn.net/bian_qing_quan11/article/details/78030016)","source":"_posts/线程池中如何确定使用的线程数.md","raw":"title: 线程池中如何确定使用的线程数\nauthor: Meredith Ma\ntags:\n  - 多线程\ncategories:\n  - 爬虫\ndate: 2019-11-11 21:57:00\n---\n### 线程池中线程的数目是跟线程池所要处理的任务性质有关的\n\n- 任务的性质：CPU密集型任务、IO密集型任务、混合型任务。\n- 任务的优先级：高、中、低。\n- 任务的执行时间：长、中、短。\n- 任务的依赖性：是否依赖其他系统资源，如数据库连接等。\n\n### 性质不同的任务可以交给不同规模的线程池执行。\n- 针对不同的任务性质而言：CPU密集型任务应配置尽可能小的线程，如配置CPU个数+1的线程数，IO密集型任务应配置尽可能多的线程，因为IO操作不占用CPU，不要让CPU闲下来，应加大线程数量，如配置两倍CPU个数+1，而对于混合型的任务，如果可以拆分，拆分成IO密集型和CPU密集型分别处理，前提是两者运行的时间是差不多的，如果处理时间相差很大，则没必要拆分了。\n- 任务对其他系统资源有依赖：如某个任务依赖数据库的连接返回的结果，这时候等待的时间越长，则CPU空闲的时间越长，那么线程数量应设置得越大，才能更好的利用CPU。 \n- 线程等待时间所占比例越高，这样的话CPU空闲时间比较多，为了能够更好的利用CPU，需要较多线程。\n- 如果线程CPU时间所占比例越高，说明CPU比较繁忙，此时需要越少线程。 \n- 另外，如果线程数量过多，线程之间的切换也会带来开销。\n\n\n### 是否使用线程池就一定比使用单线程高效呢？\n- 答案是否定的，比如Redis就是单线程的，但它却非常高效，基本操作都能达到十万量级/s。从线程这个角度来看，部分原因在于：多线程带来线程上下文切换开销，单线程就没有这种开销。\n\n<br/>[1][线程池中如何确定线程的数目](https://blog.csdn.net/bian_qing_quan11/article/details/78030016)","slug":"线程池中如何确定使用的线程数","published":1,"updated":"2019-11-11T15:44:57.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2ulrv5j0011b9ouym1y3m4b","content":"<h3 id=\"线程池中线程的数目是跟线程池所要处理的任务性质有关的\"><a href=\"#线程池中线程的数目是跟线程池所要处理的任务性质有关的\" class=\"headerlink\" title=\"线程池中线程的数目是跟线程池所要处理的任务性质有关的\"></a>线程池中线程的数目是跟线程池所要处理的任务性质有关的</h3><ul>\n<li>任务的性质：CPU密集型任务、IO密集型任务、混合型任务。</li>\n<li>任务的优先级：高、中、低。</li>\n<li>任务的执行时间：长、中、短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接等。</li>\n</ul>\n<h3 id=\"性质不同的任务可以交给不同规模的线程池执行。\"><a href=\"#性质不同的任务可以交给不同规模的线程池执行。\" class=\"headerlink\" title=\"性质不同的任务可以交给不同规模的线程池执行。\"></a>性质不同的任务可以交给不同规模的线程池执行。</h3><ul>\n<li>针对不同的任务性质而言：CPU密集型任务应配置尽可能小的线程，如配置CPU个数+1的线程数，IO密集型任务应配置尽可能多的线程，因为IO操作不占用CPU，不要让CPU闲下来，应加大线程数量，如配置两倍CPU个数+1，而对于混合型的任务，如果可以拆分，拆分成IO密集型和CPU密集型分别处理，前提是两者运行的时间是差不多的，如果处理时间相差很大，则没必要拆分了。</li>\n<li>任务对其他系统资源有依赖：如某个任务依赖数据库的连接返回的结果，这时候等待的时间越长，则CPU空闲的时间越长，那么线程数量应设置得越大，才能更好的利用CPU。 </li>\n<li>线程等待时间所占比例越高，这样的话CPU空闲时间比较多，为了能够更好的利用CPU，需要较多线程。</li>\n<li>如果线程CPU时间所占比例越高，说明CPU比较繁忙，此时需要越少线程。 </li>\n<li>另外，如果线程数量过多，线程之间的切换也会带来开销。</li>\n</ul>\n<h3 id=\"是否使用线程池就一定比使用单线程高效呢？\"><a href=\"#是否使用线程池就一定比使用单线程高效呢？\" class=\"headerlink\" title=\"是否使用线程池就一定比使用单线程高效呢？\"></a>是否使用线程池就一定比使用单线程高效呢？</h3><ul>\n<li>答案是否定的，比如Redis就是单线程的，但它却非常高效，基本操作都能达到十万量级/s。从线程这个角度来看，部分原因在于：多线程带来线程上下文切换开销，单线程就没有这种开销。</li>\n</ul>\n<p><br>[1]<a href=\"https://blog.csdn.net/bian_qing_quan11/article/details/78030016\" target=\"_blank\" rel=\"noopener\">线程池中如何确定线程的数目</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"线程池中线程的数目是跟线程池所要处理的任务性质有关的\"><a href=\"#线程池中线程的数目是跟线程池所要处理的任务性质有关的\" class=\"headerlink\" title=\"线程池中线程的数目是跟线程池所要处理的任务性质有关的\"></a>线程池中线程的数目是跟线程池所要处理的任务性质有关的</h3><ul>\n<li>任务的性质：CPU密集型任务、IO密集型任务、混合型任务。</li>\n<li>任务的优先级：高、中、低。</li>\n<li>任务的执行时间：长、中、短。</li>\n<li>任务的依赖性：是否依赖其他系统资源，如数据库连接等。</li>\n</ul>\n<h3 id=\"性质不同的任务可以交给不同规模的线程池执行。\"><a href=\"#性质不同的任务可以交给不同规模的线程池执行。\" class=\"headerlink\" title=\"性质不同的任务可以交给不同规模的线程池执行。\"></a>性质不同的任务可以交给不同规模的线程池执行。</h3><ul>\n<li>针对不同的任务性质而言：CPU密集型任务应配置尽可能小的线程，如配置CPU个数+1的线程数，IO密集型任务应配置尽可能多的线程，因为IO操作不占用CPU，不要让CPU闲下来，应加大线程数量，如配置两倍CPU个数+1，而对于混合型的任务，如果可以拆分，拆分成IO密集型和CPU密集型分别处理，前提是两者运行的时间是差不多的，如果处理时间相差很大，则没必要拆分了。</li>\n<li>任务对其他系统资源有依赖：如某个任务依赖数据库的连接返回的结果，这时候等待的时间越长，则CPU空闲的时间越长，那么线程数量应设置得越大，才能更好的利用CPU。 </li>\n<li>线程等待时间所占比例越高，这样的话CPU空闲时间比较多，为了能够更好的利用CPU，需要较多线程。</li>\n<li>如果线程CPU时间所占比例越高，说明CPU比较繁忙，此时需要越少线程。 </li>\n<li>另外，如果线程数量过多，线程之间的切换也会带来开销。</li>\n</ul>\n<h3 id=\"是否使用线程池就一定比使用单线程高效呢？\"><a href=\"#是否使用线程池就一定比使用单线程高效呢？\" class=\"headerlink\" title=\"是否使用线程池就一定比使用单线程高效呢？\"></a>是否使用线程池就一定比使用单线程高效呢？</h3><ul>\n<li>答案是否定的，比如Redis就是单线程的，但它却非常高效，基本操作都能达到十万量级/s。从线程这个角度来看，部分原因在于：多线程带来线程上下文切换开销，单线程就没有这种开销。</li>\n</ul>\n<p><br>[1]<a href=\"https://blog.csdn.net/bian_qing_quan11/article/details/78030016\" target=\"_blank\" rel=\"noopener\">线程池中如何确定线程的数目</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2ulrv4q000bb9oudelwp5yr","category_id":"ck2ulrv4t000db9oum5pqyyvf","_id":"ck2ulrv57000mb9oud6vwoja6"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","category_id":"ck2ulrv54000ib9ouzowgglq8","_id":"ck2ulrv5b000tb9oukq7rwre8"},{"post_id":"ck2ulrv4y000gb9oujz1c5vgt","category_id":"ck2ulrv57000nb9ouz2dbbfat","_id":"ck2ulrv5i000yb9oukdmldse9"},{"post_id":"ck2ulrv53000hb9oufd6blpww","category_id":"ck2ulrv5b000ub9ouw45t493w","_id":"ck2ulrv5l0012b9ounrelkm56"},{"post_id":"ck2ulrv56000lb9oue25v5svo","category_id":"ck2ulrv5i000zb9oubbevh2qd","_id":"ck2ulrv5m0015b9our2s7d66i"},{"post_id":"ck2ulrv5a000rb9ouas2z7ejc","category_id":"ck2ulrv5l0013b9oubtfmctzp","_id":"ck2ulrv5n0018b9ougzfdurue"},{"post_id":"ck2ulrv5d000xb9ou5oajo69k","category_id":"ck2ulrv5m0016b9ouqv89w99u","_id":"ck2ulrv5q001db9oufpjcivyk"},{"post_id":"ck2ulrv5j0011b9ouym1y3m4b","category_id":"ck2ulrv5l0013b9oubtfmctzp","_id":"ck2ulrv5r001hb9ouzenadjlg"}],"PostTag":[{"post_id":"ck2ulrv4q000bb9oudelwp5yr","tag_id":"ck2ulrv4w000eb9oua436k7xg","_id":"ck2ulrv59000qb9oud76vpwka"},{"post_id":"ck2ulrv4q000bb9oudelwp5yr","tag_id":"ck2ulrv54000jb9oujupdpnjc","_id":"ck2ulrv5a000sb9oussc5mm4v"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","tag_id":"ck2ulrv57000ob9ouwfgwkvc1","_id":"ck2ulrv5p001bb9oudi2pav94"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","tag_id":"ck2ulrv5b000vb9ou51oncj6v","_id":"ck2ulrv5p001cb9ou91e4optz"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","tag_id":"ck2ulrv5j0010b9ouwura5vae","_id":"ck2ulrv5q001fb9ouxlssq3sc"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","tag_id":"ck2ulrv5l0014b9ouguxrah5y","_id":"ck2ulrv5r001gb9oup9tydq64"},{"post_id":"ck2ulrv4w000fb9ouv6a7kmk7","tag_id":"ck2ulrv5m0017b9oup4jdf2cv","_id":"ck2ulrv5r001jb9oudf3vkwmu"},{"post_id":"ck2ulrv4y000gb9oujz1c5vgt","tag_id":"ck2ulrv5n001ab9oub000q1p8","_id":"ck2ulrv5s001kb9ou0twvy0m7"},{"post_id":"ck2ulrv53000hb9oufd6blpww","tag_id":"ck2ulrv5q001eb9oukqj0xglo","_id":"ck2ulrv5s001mb9ouaeg38xgm"},{"post_id":"ck2ulrv56000lb9oue25v5svo","tag_id":"ck2ulrv5r001ib9oule9993xe","_id":"ck2ulrv5v001pb9ouap7x14y8"},{"post_id":"ck2ulrv56000lb9oue25v5svo","tag_id":"ck2ulrv5s001lb9ou8doiagvh","_id":"ck2ulrv5v001qb9oub7aj92mm"},{"post_id":"ck2ulrv56000lb9oue25v5svo","tag_id":"ck2ulrv5u001nb9ouobbgwfp9","_id":"ck2ulrv5w001sb9ouo46t4d2a"},{"post_id":"ck2ulrv5a000rb9ouas2z7ejc","tag_id":"ck2ulrv5u001ob9ouob4uzvgd","_id":"ck2ulrv5x001vb9ouzrbmv28o"},{"post_id":"ck2ulrv5a000rb9ouas2z7ejc","tag_id":"ck2ulrv5v001rb9ouo6brepvm","_id":"ck2ulrv5x001wb9oui6cyyynj"},{"post_id":"ck2ulrv5a000rb9ouas2z7ejc","tag_id":"ck2ulrv5w001tb9ouwpzp0z7c","_id":"ck2ulrv5y001yb9ouqd5fzjwp"},{"post_id":"ck2ulrv5d000xb9ou5oajo69k","tag_id":"ck2ulrv5x001ub9oudnvnldeq","_id":"ck2ulrv5y001zb9ou99790hvo"},{"post_id":"ck2ulrv5j0011b9ouym1y3m4b","tag_id":"ck2ulrv5y001xb9ou8dodjtu3","_id":"ck2ulrv5z0020b9oui3t2qzoa"}],"Tag":[{"name":"python","_id":"ck2ulrv4w000eb9oua436k7xg"},{"name":"file operate","_id":"ck2ulrv54000jb9oujupdpnjc"},{"name":"TCP","_id":"ck2ulrv57000ob9ouwfgwkvc1"},{"name":"SOCKET","_id":"ck2ulrv5b000vb9ou51oncj6v"},{"name":"计算机网络","_id":"ck2ulrv5j0010b9ouwura5vae"},{"name":"TIME_WAIT","_id":"ck2ulrv5l0014b9ouguxrah5y"},{"name":"netstat","_id":"ck2ulrv5m0017b9oup4jdf2cv"},{"name":"家书","_id":"ck2ulrv5n001ab9oub000q1p8"},{"name":"机器学习实战","_id":"ck2ulrv5q001eb9oukqj0xglo"},{"name":"操作系统","_id":"ck2ulrv5r001ib9oule9993xe"},{"name":"win10","_id":"ck2ulrv5s001lb9ou8doiagvh"},{"name":"端口","_id":"ck2ulrv5u001nb9ouobbgwfp9"},{"name":"加密","_id":"ck2ulrv5u001ob9ouob4uzvgd"},{"name":"哈希","_id":"ck2ulrv5v001rb9ouo6brepvm"},{"name":"AES","_id":"ck2ulrv5w001tb9ouwpzp0z7c"},{"name":"C++","_id":"ck2ulrv5x001ub9oudnvnldeq"},{"name":"多线程","_id":"ck2ulrv5y001xb9ou8dodjtu3"}]}}